{"version":3,"sources":["redux/dialogs-reducer.js","redux/auth-reducer.js","redux/store.js","hooks/http.hook.js","components/Header/Header.js","hooks/toLocalDate.hook.js","pages/DialogsPage/Dialogs/DialogItem.js","components/Spinner/Spinner.js","pages/DialogsPage/Dialogs/Dialogs.js","pages/DialogsPage/Messages/MessageItem.js","components/Spinner/SpinnerSmall.js","pages/DialogsPage/Messages/Messages.js","pages/DialogsPage/Messages/MessagesContainer.js","pages/DialogsPage/DialogsPage.js","pages/HomePage/PostItem.js","hooks/imgParams.hook.js","pages/ProfilePage/Profile.js","pages/ProfilePage/UserProfile.js","pages/UsersPage/Users.js","pages/HomePage/HomePage.js","pages/AuthPage/AuthPage.js","App.js","routes.js","index.js"],"names":["initialState","dialogs","messages","chat","isDialogSelected","setMessagesAC","type","setDialogsAC","setChatAC","setIsDialogSelectedAC","dialogsReducer","state","action","newMessageBody","token","user","loginAC","jwtSecret","authReducer","sessionStorage","setItem","JSON","stringify","removeItem","reducers","combineReducers","dialogsPage","auth","store","createStore","useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","res","json","data","ok","Error","message","clearError","connect","dispatch","logout","props","history","useHistory","searchUsers","setSearchUsers","foundUsers","setFoundUsers","document","onmouseup","e","searchUser","querySelector","path","includes","useEffect","query","Authorization","users","console","log","className","to","style","position","top","transform","placeholder","id","value","onChange","target","length","map","_id","onClick","Avatar","src","profileImg","displayName","preventDefault","push","toLocalDate","t","date","Date","temp","getTime","getTimezoneOffset","toISOString","split","time","replace","pusher","Pusher","cluster","setDialogs","setMessages","setChat","setIsDialogSelected","dialogsLastMsg","setDialogsLastMsg","isLoaded","setIsLoaded","extra","setExtra","forEach","el","getLastMessage","channel","subscribe","bind","unbind_all","unsubscribe","selectedDialog","conversation","chatName","chatImg","participantId","chatId","name","owner","parseInt","timestamp","Spinner","searchChats","setSearchChats","useRef","dialogsHeader","dialogsItems","getDialogs","current","classList","remove","add","ref","paddingLeft","right","paddingRight","opacity","dialog","img","Message","userId","SpinnerSmall","MessagesList","newMessage","setNewMessage","isOpenedEmoji","setIsOpenedEmoji","isSendingNewMessage","setIsSendingNewMessage","chosenEmoji","setChosenEmoji","inputMessage","focus","emojiDiv","onSendMessageClick","now","fixScroll","block","scrollTop","scrollHeight","window","addEventListener","removeEventListener","prev","emoji","height","width","fontSize","left","IconButton","SearchOutlined","MoreVert","cursor","onKeyUp","keyCode","disabled","zIndex","disableAutoFocus","onEmojiClick","event","emojiObject","sendMessage","post","likes","isLiked","setIsLiked","likesCount","setLikesCount","comments","setComments","commentsCount","setCommentsCount","showAllComments","setShowAllComments","newComment","setNewComment","commentsField","createdAt","postId","newCommentHandler","text","toggle","picture","alt","color","item","bottom","imgParams","Promise","rej","solve","then","params","i","createElement","resolve","reject","onload","minWidth","minHeight","login","isCreatePostOpen","setIsCreatePostOpen","isPostDetailOpen","setIsPostDetailOpen","isChangingProfileImage","setIsChangingProfileImage","setBody","newPostImage","setNewPostImage","newProfileImage","setNewProfileImage","myPosts","setMyPosts","followData","setFollowData","profileImgParams","setProfileImgParams","isChangesLoading","setIsChangesLoading","selectedPost","setSelectedPost","newfollowData","posts","setPostData","formData","FormData","append","newPost","catch","err","alert","changeProfileImage","newData","parse","getItem","deletePost","followers","following","accept","files","required","userProfile","setUserProfile","isFollowing","setIsFollowing","useParams","followUser","followId","unfollowUser","unfollowId","pop","isLoading","setIsLoading","allUsers","setAllUsers","allPosts","setAllPosts","email","password","form","setForm","isRegistrateForm","setIsRegistrateForm","changeHandler","registerHandler","changeFormHandler","loginHandler","htmlFor","minLength","maxLength","app","isAuthenticated","routes","component","DialogsPage","exact","render","UserProfile","HomePage","fixOffset","clientHeight","AuthPage","vh","innerHeight","documentElement","setProperty","ReactDOM","getElementById"],"mappings":"6bAAIA,EAAe,CACfC,QAAS,GACTC,SAAU,GACVC,KAAM,GACNC,kBAAkB,GAoCTC,EAAgB,SAACH,GAAD,MAAe,CAACI,KAAM,eAAgBJ,aACtDK,EAAe,SAACN,GAAD,MAAc,CAACK,KAAM,cAAeL,YACnDO,EAAY,SAACL,GAAD,MAAW,CAACG,KAAM,WAAYH,SAC1CM,EAAwB,SAACL,GAAD,MAAuB,CAACE,KAAM,yBAA0BF,qBAE9EM,EAtCQ,WAAmC,IAAlCC,EAAiC,uDAAzBX,EAAcY,EAAW,uCACrD,OAAQA,EAAON,MACX,IAAK,eACD,OAAO,eACAK,GAEX,IAAK,eACD,OAAO,2BACAA,GADP,IAEIE,eAAgB,GAChBX,SAAUU,EAAOV,WAEzB,IAAK,cACD,OAAO,2BACAS,GADP,IAEIV,QAASW,EAAOX,UAExB,IAAK,WACD,OAAO,2BACAU,GADP,IAEIR,KAAMS,EAAOT,OAErB,IAAK,yBACD,OAAO,2BACAQ,GADP,IAEIP,iBAAkBQ,EAAOR,mBAEjC,QACI,OAAOO,ICnCfX,EAAe,CACfc,MAAO,KACPC,KAAM,IA6BGC,EAAU,SAACC,EAAWF,GAAZ,MAAsB,CAACT,KAAM,QAASW,YAAWF,SAEzDG,EA5BK,WAAmC,IAAlCP,EAAiC,uDAAzBX,EAAcY,EAAW,uCAClD,OAAQA,EAAON,MACX,IAAK,QAMD,OALAa,eAAeC,QAAQ,cAAeC,KAAKC,UAAU,CACjDR,MAAOF,EAAOK,UACdF,KAAMH,EAAOG,QAGV,2BACAJ,GADP,IAEIG,MAAOF,EAAOK,UACdF,KAAMH,EAAOG,OAErB,IAAK,SAGD,OAFAI,eAAeI,WAAW,eAEnB,2BACAZ,GADP,IAEIG,MAAO,KACPC,KAAM,KAEd,QACI,OAAOJ,ICvBba,EAAWC,YAAgB,CAC7BC,YAAahB,EACbiB,KAAMT,IAKKU,EAFDC,YAAYL,G,0FCPbM,EAAU,WAAO,IAAD,EACKC,oBAAS,GADd,mBAClBC,EADkB,KACTC,EADS,OAECF,mBAAS,MAFV,mBAElBG,EAFkB,KAEXC,EAFW,KA8BzB,MAAO,CAACH,UAASE,QAAOE,QA3BRC,sBAAW,uCAAE,WAAOC,GAAP,mCAAAC,EAAA,6DAAYC,EAAZ,+BAAqB,MAAOC,EAA5B,+BAAmC,KAAMC,EAAzC,+BAAmD,GAAnD,SAEjBD,IACAA,EAAOpB,KAAKC,UAAUmB,GACtBC,EAAQ,gBAAkB,oBAJT,SAQHC,MAAM,qCAAD,OAAsCL,GAAO,CAACE,SAAQC,OAAMC,YAR9D,cAQfE,EARe,iBASFA,EAAIC,OATF,WASfC,EATe,OAWhBF,EAAIG,GAXY,uBAYX,IAAIC,MAAMF,EAAKG,SAAW,wBAZf,eAerBhB,GAAW,GAfU,kBAiBda,GAjBc,wCAmBrBb,GAAW,GACXE,EAAS,KAAEc,SApBU,+DAAF,sDAuBxB,IAI8BC,WAFdb,uBAAY,kBAAMF,EAAS,QAAO,M,gBCmD1CgB,eAfO,SAACxC,GACnB,MAAO,CACHG,MAAOH,EAAMgB,KAAKb,MAClBC,KAAMJ,EAAMgB,KAAKZ,SAIA,SAACqC,GACtB,MAAO,CACHC,OAAQ,WACJD,EH5CmB,CAAC9C,KAAM,eGiDvB6C,EAzEA,SAACG,GAAW,IAChBD,EAAUC,EAAVD,OACDE,EAAUC,cAFM,EAGe1B,IAAvBM,GAHQ,EAGfF,MAHe,EAGRE,SAHQ,KAGCc,WACenB,mBAAS,KAJzB,mBAIf0B,EAJe,KAIFC,EAJE,OAKc3B,mBAAS,IALvB,mBAKf4B,EALe,KAKHC,EALG,KAgCtB,OAnBAC,SAASC,UAAY,SAACC,GAClB,IAAMC,EAAaH,SAASI,cAAc,gBACrCF,EAAEG,KAAKC,SAASH,KACjBJ,EAAc,IACdF,EAAe,MAIvBU,oBAAS,sBAAC,4BAAA7B,EAAA,0DACFkB,EADE,0CAGsBrB,EAAQ,+BAAgC,OAAQ,CAACiC,MAAOZ,GAAc,CAACa,cAAc,UAAD,OAAYhB,EAAMxC,SAH5H,OAGQyD,EAHR,OAIEX,EAAcW,GAJhB,gDAKaC,QAAQC,IAAR,MALb,gCAOFb,EAAc,IAPZ,yDASP,CAACH,IAGA,qBAAKiB,UAAU,iBAAf,SACI,sBAAKA,UAAU,SAAf,UACI,sBAAMA,UAAU,QAAhB,SAAwB,cAAC,IAAD,CAAMC,GAAG,IAAT,SAAa,6CACrC,sBAAKD,UAAU,cAAf,UACI,mBAAGA,UAAU,iBAAiBE,MAAO,CAACC,SAAU,WAAYC,IAAK,MAAOC,UAAW,oBAAnF,oBACA,uBAAOzE,KAAK,OAAO0E,YAAY,kBAAkBC,GAAG,eAAeC,MAAOzB,EAAa0B,SAAU,SAACpB,GAAD,OAAOL,EAAeK,EAAEqB,OAAOF,UAEtG,IAAtBvB,EAAW0B,QACX,qBAAKX,UAAU,mBAAf,SACKf,EAAW2B,KAAI,SAAAvE,GAAI,OAAI,cAAC,IAAD,CAAM4D,GAAIrB,EAAMvC,KAAKwE,MAAQxE,EAAKwE,IAAM,YAAcxE,EAAKwE,IAAM,WAA4BC,QAAS,kBAAM9B,EAAe,KAA3H,SAAgI,gCAAK,cAAC+B,EAAA,EAAD,CAAQC,IAAK3E,EAAK4E,aAAa,4BAAI5E,EAAK6E,kBAA1F7E,EAAKwE,aAI5H,sBAAKb,UAAU,aAAf,UACI,cAAC,IAAD,CAAMC,GAAG,IAAT,SAAa,mBAAGD,UAAU,iBAAb,oBACb,cAAC,IAAD,CAAMC,GAAG,WAAT,SAAoB,mBAAGD,UAAU,iBAAb,sBACpB,cAAC,IAAD,CAAMC,GAAG,WAAT,SAAoB,mBAAGD,UAAU,iBAAb,uBACpB,cAAC,IAAD,CAAMC,GAAG,SAAT,SAAkB,mBAAGD,UAAU,iBAAb,sBAClB,cAAC,IAAD,CAAMC,GAAG,IAAIa,QA5CP,SAACzB,GACnBA,EAAE8B,iBACFxC,IACAE,EAAQuC,KAAK,MAyCD,SAAqC,mBAAGpB,UAAU,iBAAb,sC,qCCpD1CqB,EAPK,SAACC,GACjB,IAAMC,EAAO,IAAIC,KAAKF,GAEhBG,EADiB,IAAID,KAAKD,EAAKG,UAAwC,IAA3BH,EAAKI,qBAA8BC,cACzDC,MAAM,KAClC,MAAO,CAACN,KAAME,EAAK,GAAIK,KAAML,EAAK,GAAGM,QAAQ,aAAc,MCKzDC,EAAS,IAAIC,IAAO,uBAAwB,CAC9CC,QAAS,OAqGEzD,eAzBO,SAACxC,GACnB,MAAO,CACHV,QAASU,EAAMe,YAAYzB,QAC3Ba,MAAOH,EAAMgB,KAAKb,MAClBC,KAAMJ,EAAMgB,KAAKZ,SAIA,SAACqC,GACtB,MAAO,CACHyD,WAAY,SAAC5G,GACTmD,EAAS7C,EAAaN,KAE1B6G,YAAa,SAAC5G,GACVkD,EAAS/C,EAAcH,KAE3B6G,QAAS,SAAA5G,GACLiD,EAAS5C,EAAUL,KAEvB6G,oBAAqB,SAACzE,GAClBa,EAAS3C,EAAsB8B,QAK5BY,EAlGI,SAACG,GAAW,IAAD,EACoBxB,IAAvBM,GADG,EACnBJ,QADmB,EACVE,MADU,EACHE,SADG,KACMc,WACYnB,mBAAS,KAF3B,mBAEnBkF,EAFmB,KAEHC,EAFG,OAGMnF,oBAAS,GAHf,mBAGnBoF,EAHmB,KAGTC,EAHS,OAIArF,mBAAS,IAJT,mBAInBsF,EAJmB,KAIZC,EAJY,KAM1BlD,qBAAU,WAON,OANAd,EAAM+D,MAAME,SAAQ,SAAAC,GACZA,EAAGvC,KAAO3B,EAAMvC,KAAKwE,KACrB+B,EAASE,MAIV,kBAAOlE,EAAM0D,qBAAoB,MACzC,IAEH,IAAMS,EAAc,uCAAG,4BAAAlF,EAAA,+EAEIH,EAAQ,iCAAD,OAAkCkB,EAAM2B,IAAM,MAAO,KAAM,CAACX,cAAc,UAAD,OAAYhB,EAAMxC,SAFtG,OAETgC,EAFS,OAGfoE,EAAkBpE,GAClBsE,GAAY,GAJG,gDAKL5C,QAAQC,IAAR,MALK,yDAAH,qDAQpBL,qBAAU,WACNqD,IAEA,IAAMC,EAAUhB,EAAOiB,UAAU,YAKjC,OAJAD,EAAQE,KAAK,cAAc,WACvBH,OAGG,WACHC,EAAQG,aACRH,EAAQI,iBAEb,CAACxE,EAAM2B,KAEV,IAAM8C,EAAc,uCAAG,4BAAAxF,EAAA,+EAEIH,EAAQ,kCAAD,OAAmCkB,EAAM2B,IAAM,MAAO,KAAM,CAACX,cAAc,UAAD,OAAYhB,EAAMxC,SAFvG,OAETgC,EAFS,OAGfQ,EAAMwD,YAAYhE,EAAKkF,cACvB1E,EAAMyD,QAAQ,CACVkB,SAAUZ,EAAMzB,aAAe9C,EAAKmF,SACpCC,QAASb,EAAM1B,YAAc7C,EAAKoF,QAClCC,cAAed,EAAMpC,GACrBmD,OAAQ9E,EAAM2B,KAElB3B,EAAM0D,qBAAoB,GAVX,gDAWLxC,QAAQC,IAAR,MAXK,yDAAH,qDAcpB,OACI,mCACK0C,GACD,qBAAK3B,QAASuC,EAAgBrD,UAAU,aAAxC,SACI,sBAAKA,UAAU,mBAAf,UACI,qBAAKA,UAAU,0BAAf,SAAyC,cAACe,EAAA,EAAD,CAAQC,IAAK2B,EAAM1B,eAC5D,sBAAKjB,UAAU,wBAAf,UACI,8BAAK,6BAAKpB,EAAM+E,MAAQhB,EAAMzB,gBAC9B,uBAAMlB,UAAU,2BAAhB,UAA4CuC,EAAeqB,MAAM1C,YAAjE,KAAgFqB,EAAehE,cAEnG,sBAAKyB,UAAU,YAAf,UACI,8BAAMqB,EAAYwC,SAAStB,EAAeuB,YAAYvC,OACtD,8BAAMF,EAAYwC,SAAStB,EAAeuB,YAAYhC,oBClE/DiC,G,MARC,WACZ,OACI,qBAAK/D,UAAU,UAAf,SACI,sBAAKA,UAAU,eAAf,UAA8B,wBAAW,wBAAW,wBAAW,+BCUrEgC,EAAS,IAAIC,IAAO,uBAAwB,CAC9CC,QAAS,OAwEEzD,eAjBO,SAACxC,GACnB,MAAO,CACHV,QAASU,EAAMe,YAAYzB,QAC3BG,iBAAkBO,EAAMe,YAAYtB,iBACpCW,KAAMJ,EAAMgB,KAAKZ,KACjBD,MAAOH,EAAMgB,KAAKb,UAID,SAACsC,GACtB,MAAO,CACHyD,WAAY,SAAC5G,GACTmD,EAAS7C,EAAaN,QAKnBkD,EArEK,SAACG,GAAW,IAAD,EACUxB,IAAvBM,GADa,EACpBF,MADoB,EACbE,SADa,KACJc,WACOnB,oBAAS,IAFZ,mBAEpBC,EAFoB,KAEXC,EAFW,OAGWF,mBAAS,IAHpB,mBAGpB2G,EAHoB,KAGPC,EAHO,KAIrB1I,EAAU2I,iBAAO,MACjBC,EAAgBD,iBAAO,MACvBE,EAAeF,iBAAO,MAEtBG,EAAU,uCAAG,4BAAAxG,EAAA,+EAEQH,EAAQ,+BAAgC,MAAO,KAAM,CACpEkC,cAAc,UAAD,OAAYhB,EAAMxC,SAHxB,OAELgC,EAFK,OAKXQ,EAAMuD,WAAW/D,GACjBb,GAAW,GANA,gDAODuC,QAAQC,IAAR,MAPC,yDAAH,qDAuBhB,OAbAL,qBAAU,WACLd,EAAMlD,iBAA2DH,EAAQ+I,QAAQC,UAAUC,OAAO,QAAzEjJ,EAAQ+I,QAAQC,UAAUE,IAAI,UACzD,CAAC7F,EAAMlD,mBAEVgE,qBAAU,WACN2E,IAEgBrC,EAAOiB,UAAU,SACzBC,KAAK,WAAW,WACpBmB,SAEL,IAGK,sBAAKK,IAAKnJ,EAASyE,UAAW,eAA9B,UACI,qBAAK0E,IAAKP,EAAenE,UAAU,kBAAnC,SACI,sBAAKA,UAAU,eAAf,UACI,mBAAGA,UAAU,iBAAiBE,MAAO,CAACC,SAAU,WAAYC,IAAK,MAAOC,UAAW,mBAAoBsE,YAAa,OAApH,oBACA,uBAAO/I,KAAK,OAAO0E,YAAY,+BAA+BC,GAAG,qBAAqBC,MAAOwD,EAAavD,SAAU,SAACpB,GAAD,OAAO4E,EAAe5E,EAAEqB,OAAOF,UACnJ,mBAAGR,UAAU,iBAAiBE,MAAO,CAACC,SAAU,WAAYC,IAAK,MAAOwE,MAAO,IAAKvE,UAAW,mBAAoBwE,aAAc,MAAOC,QAAS,MAAjJ,sBAGR,qBAAKJ,IAAKN,EAAcpE,UAAU,iBAAlC,SAEI1C,EACA,cAAC,EAAD,IAEAsB,EAAMrD,QAAQqF,KAAI,SAAAmE,GAAM,OAAI,cAAC,EAAD,CAAYpB,KAAMoB,EAAOpB,KAAMqB,IAAKD,EAAOvB,QAAyBjD,GAAIwE,EAAOxE,GAAIuD,UAAWiB,EAAOjB,UAAWnB,MAAOoC,EAAOpC,OAArEoC,EAAOxE,e,wBCjDjG0E,G,YAZC,SAACrG,GACb,IAAMkF,EAAYzC,EAAYwC,SAASjF,EAAML,QAAQuF,YAErD,OACI,sBAAK9D,UAAS,0BAAqBpB,EAAML,QAAQqF,MAAM/C,MAAQjC,EAAMsG,QAAU,sBAA/E,UACI,sBAAMlF,UAAU,gBAAhB,SAAiCpB,EAAML,QAAQqF,MAAM1C,cACrD,qBAAKlB,UAAU,UAAf,SAA0BpB,EAAML,QAAQA,UACxC,sBAAMyB,UAAU,qBAAhB,SAAsC8D,EAAUvC,KAAO,IAAMuC,EAAUhC,Y,iBCEpEqD,G,MAVM,WACjB,OACI,qBAAKnF,UAAU,wCAAf,SACI,sBAAKA,UAAU,mBAAf,UACI,wBAAW,wBAAW,wBAAW,wBAAW,wBAAW,wBAAW,wBAAW,wBAAW,wBAAW,wBAAW,wBAAW,+BCqI1HoF,EAjIM,SAACxG,GAAW,IAAD,EACkBxB,IAAvBM,GADK,EACrBJ,QADqB,EACZE,MADY,EACLE,SADK,KACIc,WACInB,mBAAS,KAFjB,mBAErBgI,EAFqB,KAETC,EAFS,OAGcjI,oBAAS,GAHvB,mBAGrBkI,EAHqB,KAGNC,EAHM,OAI0BnI,oBAAS,GAJnC,mBAIrBoI,EAJqB,KAIAC,EAJA,OAKUrI,mBAAS,MALnB,mBAKrBsI,EALqB,KAKRC,EALQ,KAMtBC,EAAe3B,iBAAO,MAM5BxE,qBAAU,WASN,OARAP,SAASC,UAAY,SAACC,GAClBwG,EAAavB,QAAQwB,QACrB,IAAMC,EAAW5G,SAASI,cAAc,aACnCF,EAAEG,KAAKC,SAASsG,IACjBP,GAAiB,IAIlB,kBAAMrG,SAASC,UAAY,QACnC,CAACmG,IAEJ,IAAMS,EAAkB,uCAAG,sBAAAnI,EAAA,6DACvByH,EAAc,IACdE,GAAiB,GACjBE,GAAuB,GAHA,kBAKbhI,EAAQ,6BAAD,OAA8BkB,EAAMnD,KAAKiI,QAAU,OAAQ,CACpEnF,QAAS8G,EACTvB,UAAWtC,KAAKyE,OACjB,CAACrG,cAAc,UAAD,OAAYhB,EAAMxC,SARhB,uDAST0D,QAAQC,IAAR,MATS,yDAAH,qDAYlBmG,EAAY,WACd,IACI,IAAMC,EAAQhH,SAASI,cAAc,mBACrC4G,EAAMC,UAAYD,EAAME,aAC1B,YAsCN,OAnCA3G,qBAAU,WAIN,OAHA4G,OAAOC,iBAAiB,UAAU,kBAAML,OACxCL,EAAavB,QAAQwB,QAEd,kBAAMQ,OAAOE,oBAAoB,UAAU,kBAAMN,UACzD,IAEHxG,qBAAU,WACN,IAIMsD,EAJS,IAAIf,IAAO,uBAAwB,CAC9CC,QAAS,OAGUe,UAAU,YAYjC,OAXAD,EAAQE,KAAK,aAAb,sBAA2B,4BAAArF,EAAA,+EAEAH,EAAQ,kCAAD,OAAmCkB,EAAMnD,KAAKiI,QAAU,MAAO,KAAM,CAAC9D,cAAc,UAAD,OAAYhB,EAAMxC,SAF5G,OAEbgC,EAFa,OAGnBQ,EAAMwD,YAAYhE,EAAKkF,cACvB4C,IACAR,GAAuB,GALJ,0GAS3BQ,IAEO,WACHlD,EAAQG,aACRH,EAAQI,iBAEb,CAACxE,EAAMnD,KAAKiI,SAEfhE,qBAAU,WACFiG,GACJL,GAAc,SAAAmB,GAAI,OAAIA,EAAOd,EAAYe,WAC1C,CAACf,IAGA,sBAAK3F,UAAU,WAAf,UACI,sBAAKA,UAAU,mBAAf,UACI,qBAAKA,UAAU,UAAUE,MAAO,CAACyG,OAAQ,OAAQC,MAAO,QAAxD,SACI,mBAAG9F,QAAS,kBAAMlC,EAAM0D,qBAAoB,IAAQtC,UAAU,iBAAiBE,MAAO,CAAC2G,SAAU,OAAQ1G,SAAU,WAAY2G,KAAM,QAArI,4BAEJ,qBAAK9G,UAAU,uBAAf,SACI,eAAC,IAAD,CAAOC,GAAI,YAAcrB,EAAMnD,KAAKgI,cAApC,UACI,cAAC1C,EAAA,EAAD,CAAQC,IAAKpC,EAAMnD,KAAK+H,UACxB,8BAAK,4BAAI5E,EAAMnD,KAAK8H,kBAG5B,sBAAKvD,UAAU,wBAAf,UACI,cAAC+G,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,MAKJ,cAACD,EAAA,EAAD,UACI,cAACE,EAAA,EAAD,YAIZ,qBAAKjH,UAAU,iBAAf,SACMpB,EAAMpD,SAASoF,KAAK,SAAArC,GAAO,OAAI,cAAC,EAAD,CAAa2G,OAAQtG,EAAMvC,KAAKwE,IAAKtC,QAASA,GAAcA,EAAQsC,UAEzG,sBAAKb,UAAU,mBAAf,UACI,mBAAGc,QAAS,kBAAM0E,GAAkBD,IAChCvF,UAAW,0BACXE,MAAO,CAAC2G,SAAU,OAAQK,OAAQ,UAAWN,MAAO,QAFxD,6BAGA,uBACIlC,IAAKmB,EACLrF,MAAO6E,EACP5E,SAAU,SAAApB,GAAMiG,EAAcjG,EAAEqB,OAAOF,OAAQgF,GAAiB,IAChE2B,QAAS,SAAA9H,GAAC,QAAmB,KAAdA,EAAE+H,UAAkB/B,IAAcW,KACjDpK,KAAK,OACL0E,YAAY,uBAChB,yBAAQQ,QAASkF,EAAoBqB,UAAWhC,EAAhD,UACI,mBAAGrF,UAAW,iBAAkBE,MAAO,CAAC2G,SAAU,OAAQK,OAAQ,UAAWN,MAAO,QAApF,kBACCnB,GAAuB,cAAC,EAAD,UAG/BF,GACD,qBAAKvF,UAAU,WAAWE,MAAO,CAACC,SAAU,WAAYC,IAAK,MAAO0G,KAAM,MAAOzG,UAAW,wBAAyBiH,OAAQ,QAA7H,SACI,cAAC,IAAD,CAAQC,kBAAkB,EAAMC,aAnHvB,SAACC,EAAOC,GACzB9B,EAAe8B,YCSRjJ,eAzBO,SAACxC,GACnB,MAAO,CACHT,SAAUS,EAAMe,YAAYxB,SAC5BC,KAAMQ,EAAMe,YAAYvB,KACxBY,KAAMJ,EAAMgB,KAAKZ,KACjBD,MAAOH,EAAMgB,KAAKb,UAGD,SAACsC,GACtB,MAAO,CACHiJ,YAAa,WACTjJ,EZwB6B,CAAC9C,KAAM,kBYtBxCwG,YAAa,SAAC5G,GACVkD,EAAS/C,EAAcH,KAE3B6G,QAAS,SAAA5G,GACLiD,EAAS5C,EAAUL,KAEvB6G,oBAAqB,SAACzE,GAClBa,EAAS3C,EAAsB8B,QAK5BY,CAA6C2G,GCR7C3G,eANO,SAACxC,GACnB,MAAO,CACHP,iBAAkBO,EAAMe,YAAYtB,oBAI7B+C,EAfK,SAACG,GACjB,OACI,sBAAKoB,UAAU,eAAf,UACI,cAAC,EAAD,IACEpB,EAAMlD,iBAAqE,cAAC,EAAD,IAAlD,qBAAKsE,UAAU,aAAf,iC,QC6FxBvB,G,MAAAA,aALS,SAACxC,GAAD,MAAY,CAChCG,MAAOH,EAAMgB,KAAKb,MAClBC,KAAMJ,EAAMgB,KAAKZ,QAGNoC,EA9FE,SAAC,GAAyB,IAAxBmJ,EAAuB,EAAvBA,KAAMxL,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KAAU,EACQe,IAAvBM,GADe,EAC/BJ,QAD+B,EACtBE,MADsB,EACfE,SADe,KACNc,WACFnB,mBAASuK,EAAKC,MAAMpI,SAASpD,EAAKwE,OAF1B,mBAE/BiH,EAF+B,KAEtBC,EAFsB,OAGN1K,oBAAS,GAHH,mBAG/BoF,EAH+B,KAGrBC,EAHqB,OAIFrF,mBAASuK,EAAKC,MAAMlH,QAJlB,mBAI/BqH,EAJ+B,KAInBC,EAJmB,OAKN5K,mBAASuK,EAAKM,UALR,mBAK/BA,EAL+B,KAKrBC,EALqB,OAMI9K,mBAASuK,EAAKM,SAASvH,QAN3B,mBAM/ByH,EAN+B,KAMhBC,EANgB,OAOQhL,oBAAS,GAPjB,mBAO/BiL,EAP+B,KAOdC,EAPc,OAQFlL,mBAAS,IARP,mBAQ/BmL,EAR+B,KAQnBC,EARmB,KAShCC,EAAgBxE,iBAAO,MATS,EAUA7G,mBAAS,MAVT,mBAU/BsI,EAV+B,KAUlBC,EAVkB,OAWIvI,oBAAS,GAXb,mBAW/BkI,EAX+B,KAWhBC,EAXgB,KAYhC1B,EAAYzC,EAAYuG,EAAKe,WAInCjJ,qBAAU,WAQN,OAPAP,SAASC,UAAY,SAACC,GAClB,IAAM0G,EAAW5G,SAASI,cAAc,aACnCF,EAAEG,KAAKC,SAASsG,IACjBP,GAAiB,IAIlB,kBAAMrG,SAASC,UAAY,QACnC,CAACmG,IAEJ7F,oBAAS,sBAAC,4BAAA7B,EAAA,0DACF4E,EADE,gCAEiB/E,EAAQ,kBAAD,OAAmBoK,EAAU,OAAS,UAAY,MAAO,CAACc,OAAQhB,EAAK/G,KAAM,CAACjB,cAAc,UAAD,OAAYxD,KAF/H,OAEIgC,EAFJ,OAGF6J,EAAc7J,EAAKyJ,MAAMlH,QAHvB,2CAKP,CAACmH,IAEJ,IAKMe,GAAiB,uCAAG,4BAAAhL,EAAA,sEACHH,EAAQ,yBAA0B,MAAO,CAACkL,OAAQhB,EAAK/G,IAAKiI,KAAMN,GAAa,CAAC5I,cAAc,UAAD,OAAYxD,KADtG,OAChBgC,EADgB,OAEtB+J,EAAY/J,EAAK8J,UACjBO,EAAc,IACdJ,EAAiBjK,EAAK8J,SAASvH,QAC/B6E,GAAiB,GALK,2CAAH,qDAgBvB,OARA9F,qBAAU,WACNgJ,EAAcpE,QAAQC,UAAUwE,OAAO,mBACxC,CAACT,IAEJ5I,qBAAU,WACFiG,GAAa8C,GAAc,SAAAhC,GAAI,OAAIA,EAAOd,EAAYe,WAC3D,CAACf,IAGA,qBAAK3F,UAAU,UAAf,SACI,sBAAKA,UAAU,OAAf,UACI,qBAAKA,UAAU,cAAf,SACI,eAAC,IAAD,CAAMC,GAAI5D,EAAKwE,MAAQ+G,EAAKhE,MAAM/C,IAAM,YAAc+G,EAAKhE,MAAM/C,IAAM,WAAvE,UAAmF,cAACE,EAAA,EAAD,CAAQC,IAAK4G,EAAKhE,MAAM3C,aAAa,4BAAI2G,EAAKhE,MAAM1C,mBAE3I,qBAAKlB,UAAU,aAAf,SACI,qBAAKgB,IAAK4G,EAAKoB,QAASC,IAAI,OAEhC,sBAAKjJ,UAAU,eAAf,UACI,mBAAGc,QA/BC,WAChB4B,GAAY,GACZqF,GAAYD,IA6ByB9H,UAAW,iBAAkBE,MAAO,CAAC2G,SAAU,OAAQK,OAAQ,UAAWgC,MAAO,OAA1G,SAAoHpB,EAAU,WAAa,oBAC3I,gCAAO,6CAAgBE,OACvB,8BAAG,iCAASJ,EAAKhE,MAAM1C,cAAvB,IAA8C0G,EAAK7J,QACnD,8BAAK,yBAAQiC,UAAU,oBAAoBc,QAAS,kBAAMyH,GAAoBD,IAAzE,UAA6FA,EAA2B,OAAT,OAA/G,kBAA+IF,EAA/I,SACL,qBAAKpI,UAAW,yBAA0B0E,IAAKgE,EAA/C,SACKR,EAAStH,KAAI,SAAAuI,GAAI,OAAI,gCAAoB,iCAASA,EAAKvF,MAAM1C,cAAxC,IAA+DiI,EAAKL,OAA1DK,EAAKtI,UAEzC,qBAAKb,UAAU,YAAf,SAA4B8D,EAAUvC,KAAO,IAAMuC,EAAUhC,UAEjE,sBAAK9B,UAAU,cAAf,UACKuF,GACG,qBAAKvF,UAAU,WAAWE,MAAO,CAACC,SAAU,WAAYiJ,OAAQ,OAAQtC,KAAM,MAAOzG,UAAW,yBAA0BiH,OAAQ,QAAlI,SACI,cAAC,IAAD,CAAQC,kBAAkB,EAAMC,aA/DnC,SAACC,EAAOC,GAAR,OAAwB9B,EAAe8B,QAkE5C,mBAAG5G,QAAS,kBAAM0E,GAAkBD,IAAgBvF,UAAW,0BAA2BE,MAAO,CAAC2G,SAAU,OAAQK,OAAQ,UAAWN,MAAO,QAA9I,6BACA,uBAAOpG,MAAOgI,EAAY/H,SAAU,SAAApB,GAAMoJ,EAAcpJ,EAAEqB,OAAOF,OAAQgF,GAAiB,IAAU2B,QAAS,SAAA9H,GAAC,QAAmB,KAAdA,EAAE+H,UAAkBoB,IAAcK,MAA6BjN,KAAK,OAAO0E,YAAY,qBAC1M,wBAAQQ,QAAS+H,GAAmBxB,UAAWmB,EAA/C,iCC1DLa,MAjCf,SAAmBjL,GACf,OAAO,IAAIkL,SAAQ,SAACpL,EAAKqL,GACrB,GAAqB,kBAAVnL,EACPoL,EAAMpL,GAAMqL,MAAK,SAAAC,GAAM,OAAIxL,EAAIwL,UAC5B,CACiB,IAAhBtL,EAAKuC,QAAczC,EAAIE,GAE3B,IAHG,eAGMuL,GACLH,EAAMpL,EAAKuL,GAAGX,SAASS,MAAK,SAACC,GACzBtL,EAAKuL,GAAGD,OAASA,EAEbC,EAAE,IAAMvL,EAAKuC,QAAQzC,EAAIE,OAJ5BuL,EAAI,EAAGA,EAAIvL,EAAKuC,SAAUgJ,EAAG,EAA7BA,GASb,SAASH,EAAMxI,GACX,IAAIgE,EAAM7F,SAASyK,cAAc,OAEjC,OADA5E,EAAIhE,IAAMA,EACH,IAAIsI,SAAQ,SAACO,EAASC,GACzB9E,EAAI+E,OAAS,WACTF,EACI7E,EAAI4B,OAAS5B,EAAI2B,OACjB,CAACA,OAAQ,OAAQqD,SAAU,OAAQpD,MAAO,OAAQqD,UAAW,QAE7D,CAACtD,OAAQ,OAAQqD,SAAU,OAAQpD,MAAO,OAAQqD,UAAW,kBCiMtExL,eAfO,SAACxC,GACnB,MAAO,CACHG,MAAOH,EAAMgB,KAAKb,MAClBC,KAAMJ,EAAMgB,KAAKZ,SAIE,SAACqC,GACxB,MAAO,CACHwL,MAAO,SAAC9N,EAAOC,GACXqC,EAASpC,EAAQF,EAAOC,QAKrBoC,EAhNC,SAACG,GAAW,IAAD,EACcxB,IAAvBM,GADS,EAChBF,MADgB,EACTE,SADS,KACAc,WACyBnB,oBAAS,IAFlC,mBAEhB8M,EAFgB,KAEEC,EAFF,OAGyB/M,oBAAS,GAHlC,mBAGhBgN,EAHgB,KAGEC,EAHF,OAIqCjN,oBAAS,GAJ9C,mBAIhBkN,EAJgB,KAIQC,EAJR,OAKCnN,mBAAS,IALV,mBAKhBU,EALgB,KAKV0M,EALU,OAMiBpN,mBAAS,IAN1B,mBAMhBqN,EANgB,KAMFC,EANE,OAOuBtN,mBAAS,IAPhC,mBAOhBuN,EAPgB,KAOCC,EAPD,OAQOxN,mBAAS,MARhB,mBAQhByN,EARgB,KAQPC,EARO,OASa1N,mBAAS,MATtB,mBAShB2N,EATgB,KASJC,EATI,OAUyB5N,mBAAS,MAVlC,mBAUhB6N,EAVgB,KAUEC,EAVF,OAWyB9N,oBAAS,GAXlC,mBAWhB+N,EAXgB,KAWEC,EAXF,OAYiBhO,mBAAS,MAZ1B,oBAYhBiO,GAZgB,MAYFC,GAZE,MAcvB7L,oBAAS,sBAAC,8BAAA7B,EAAA,sEACaH,EAAQ,yBAA0B,MAAO,KAAM,CAC9DkC,cAAc,UAAD,OAAYhB,EAAMxC,SAF7B,cACAgC,EADA,gBAKsBV,EAAQ,8BAA+B,MAAO,KAAM,CAC5EkC,cAAc,UAAD,OAAYhB,EAAMxC,SAN7B,OAKAoP,EALA,OASNP,EAAcO,GAEdnC,EAAUjL,EAAKqN,OAAOhC,MAAK,SAACrL,GACxB2M,EAAW3M,MAGfiL,EAAUzK,EAAMvC,KAAK4E,YAAYwI,MAAK,SAAAC,GAClCyB,EAAoBzB,MAhBlB,2CAkBP,IAEH,IAAMgC,GAAW,uCAAG,4BAAA7N,EAAA,6DAChBwN,GAAoB,IACdM,EAAW,IAAIC,UACZC,OAAO,OAAQnB,GACxBiB,EAASE,OAAO,gBAAiB,kBACjCF,EAASE,OAAO,aAAc,kBALd,SAMV5N,MAAM,8DAA+D,CACvEH,OAAQ,OACRC,KAAM4N,IAETlC,MAAK,SAAAvL,GAAG,OAAIA,EAAIC,UAChBsL,KALK,uCAKA,WAAMkC,GAAN,eAAA9N,EAAA,sEACoBH,EAAQ,sBAAuB,OAAQ,CAACK,OAAMiL,QAAS2C,EAAS/N,KAAM,CACxFgC,cAAc,UAAD,OAAYhB,EAAMxC,SAFjC,OACI0P,EADJ,OAKFzC,EAAU,CAACyC,IAAUrC,MAAK,SAACrL,GACvB2M,EAAW,CAAC3M,EAAK,IAAP,mBAAc0M,KACxBO,GAAoB,GACpBjB,GAAoB,MARtB,2CALA,uDAgBL2B,OAAM,SAAAC,GACHX,GAAoB,GACpBY,MAAMD,MAxBM,2CAAH,qDA4BXE,GAAkB,uCAAG,4BAAArO,EAAA,yDACvBwN,GAAoB,GACdM,EAAW,IAAIC,SAChBhB,EAHkB,uBAInBqB,MAAM,kCACNZ,GAAoB,GALD,iCAQvBM,EAASE,OAAO,OAAQjB,GACxBe,EAASE,OAAO,gBAAiB,kBACjCF,EAASE,OAAO,aAAc,kBAVP,UAWjB5N,MAAM,8DAA+D,CACvEH,OAAQ,OACRC,KAAM4N,IAETlC,MAAK,SAAAvL,GAAG,OAAIA,EAAIC,UAChBsL,KALK,uCAKA,WAAMkC,GAAN,iBAAA9N,EAAA,sEACiBH,EAAQ,4BAA6B,MAAO,CAACsL,QAAS2C,EAAS/N,KAAM,CACpFgC,cAAc,UAAD,OAAYhB,EAAMxC,SAFjC,OACIgC,EADJ,OAIF3B,eAAeC,QAAQ,cAAeC,KAAKC,UAAU,CACjDR,MAAOwC,EAAMxC,MAAOC,KAAM+B,MAExB+N,EAAUxP,KAAKyP,MAAM3P,eAAe4P,QAAQ,kBACnCF,EAAQ/P,OACnBwC,EAAMsL,MAAMiC,EAAQ/P,MAAO+P,EAAQ9P,MAEvCgP,GAAoB,GACpBb,GAA0B,GAZxB,2CALA,uDAmBLuB,OAAM,SAAAC,GAAG,OAAIlM,QAAQC,IAAIiM,MA9BH,4CAAH,qDAiClBM,GAAU,uCAAG,WAAO1D,GAAP,eAAA/K,EAAA,6DACfwN,GAAoB,GADL,SAET3N,EAAQ,0BAAD,OAA2BkL,GAAU,SAAU,KAAM,CAC9DhJ,cAAc,UAAD,OAAYhB,EAAMxC,SAHpB,uBAKIsB,EAAQ,yBAA0B,MAAO,KAAM,CAC9DkC,cAAc,UAAD,OAAYhB,EAAMxC,SANpB,OAKTgC,EALS,OASfiL,EAAUjL,EAAKqN,OAAOhC,MAAK,SAAArL,GAAI,OAAI2M,EAAW3M,MAE9CiN,GAAoB,GACpBf,GAAoB,GAZL,2CAAH,sDAehB,OACI,mCAEKQ,EAGD,sBAAK9K,UAAU,eAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,qBAAKA,UAAU,SAAf,SACI,qBAAKE,MAAOgL,EAAkBlK,IAAKpC,EAAMvC,KAAK4E,WAAYgI,IAAI,OAElE,sBAAKjJ,UAAU,OAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,6BAAKpB,EAAMvC,KAAK6E,cAChB,gCACI,mBAAGJ,QAAS,kBAAM0J,GAA0B,IAAOxK,UAAW,iBAA9D,sBACA,mBAAGc,QAAS,kBAAMsJ,GAAoB,IAAOpK,UAAW,iBAAxD,iCAGR,sBAAKA,UAAU,aAAf,UACI,+BAAI,iCAAS8K,EAAQnK,SAArB,YACA,+BAAI,iCAASqK,EAAWuB,UAAU5L,SAAlC,gBACA,+BAAI,iCAASqK,EAAWwB,UAAU7L,SAAlC,yBAIZ,sBAAKX,UAAU,oBAAf,UACI,+BAAI,iCAAS8K,EAAQnK,SAArB,YACA,+BAAI,iCAASqK,EAAWuB,UAAU5L,SAAlC,gBACA,+BAAI,iCAASqK,EAAWwB,UAAU7L,SAAlC,mBAEJ,qBAAKX,UAAU,mBAAf,SACC8K,EAAQlK,KAAI,SAAAgH,GAAI,OAAI,qBAAK9G,QAAS,WAAOyK,GAAgB3D,GAAO0C,GAAoB,IAAhE,SAAuF,8BAAK,qBAAKtJ,IAAK4G,EAAKoB,QAASC,IAAI,GAAI/I,MAAO0H,EAAK8B,YAA3D9B,EAAK/G,UAGtG0J,GAA0B,qCACvB,qBAAKzJ,QAAS,kBAAM0J,GAA0B,IAAQxK,UAAU,wBAChE,sBAAKA,UAAU,eAAf,UACKoL,GAAoB,cAAC,EAAD,IACrB,mBAAGtK,QAAS,kBAAM0J,GAA0B,IAAQxK,UAAW,2BAA/D,mBACA,sBAAKA,UAAU,QAAf,UACI,kDACA,gCACI,qDACA,uBAAOpE,KAAK,OAAO6Q,OAAO,iCAAiChM,SAAU,SAAApB,GAAC,OAAIwL,EAAmBxL,EAAEqB,OAAOgM,MAAM,KAAKC,UAAQ,OAE7H,wBAAQ7L,QAASoL,GAAjB,6BAIX/B,GAAoB,qCACjB,qBAAKrJ,QAAS,kBAAMsJ,GAAoB,IAAQpK,UAAU,wBAC1D,sBAAKA,UAAU,eAAf,UACKoL,GAAoB,cAAC,EAAD,IACrB,mBAAGtK,QAAS,kBAAMsJ,GAAoB,IAAQpK,UAAW,2BAAzD,mBACA,sBAAKA,UAAU,QAAf,UACI,0CACA,gCACI,8CACA,uBAAOpE,KAAK,OAAO6Q,OAAO,iCAAiChM,SAAU,SAAApB,GAAC,OAAIsL,EAAgBtL,EAAEqB,OAAOgM,MAAM,KAAKC,UAAQ,IACtH,gDACA,uBAAO/Q,KAAK,OAAO0E,YAAY,WAAWE,MAAOzC,EAAM0C,SAAU,SAAApB,GAAC,OAAIoL,EAAQpL,EAAEqB,OAAOF,QAAQmM,UAAQ,OAE3G,wBAAQ7L,QAAS4K,GAAjB,6BAIVJ,IAAgBjB,GAClB,qCACI,qBAAKvJ,QAAS,kBAAMwJ,GAAoB,IAAQtK,UAAU,wBAC1D,sBAAKA,UAAU,eAAf,UACKoL,GAAoB,cAAC,EAAD,IACrB,mBAAGtK,QAAS,kBAAMwL,GAAWhB,GAAazK,MAAMb,UAAW,4BAA3D,oBACA,mBAAGc,QAAS,kBAAMwJ,GAAoB,IAAQtK,UAAW,2BAAzD,mBACA,cAAC,EAAD,CAAU4H,KAAM0D,cAtE5B,cAAC,EAAD,SC2FG7M,eAzBO,SAACxC,GACnB,MAAO,CACHV,QAASU,EAAMe,YAAYzB,QAC3Ba,MAAOH,EAAMgB,KAAKb,MAClBC,KAAMJ,EAAMgB,KAAKZ,SAIA,SAACqC,GACtB,MAAO,CACHyD,WAAY,SAAC5G,GACTmD,EAAS7C,EAAaN,KAE1B6G,YAAa,SAAC5G,GACVkD,EAAS/C,EAAcH,KAE3B6G,QAAS,SAAA5G,GACLiD,EAAS5C,EAAUL,KAEvB6G,oBAAqB,SAACzE,GAClBa,EAAS3C,EAAsB8B,QAK5BY,EA7MC,SAACG,GACGE,cAAhB,IADuB,EAEc1B,IAAvBM,GAFS,EAEhBF,MAFgB,EAETE,SAFS,KAEAc,WACenB,mBAAS,OAHxB,mBAGhBuP,EAHgB,KAGHC,EAHG,OAIexP,mBAAS,MAJxB,mBAIhByP,EAJgB,KAIHC,EAJG,OAKyB1P,mBAAS,MALlC,mBAKhB6N,EALgB,KAKEC,EALF,KAMhBjG,EAAU8H,cAAV9H,OANgB,EAOyB7H,oBAAS,GAPlC,mBAOhBgN,EAPgB,KAOEC,EAPF,OAQiBjN,mBAAS,MAR1B,mBAQhBiO,EARgB,KAQFC,EARE,KAUvB7L,oBAAS,sBAAC,4BAAA7B,EAAA,sEACaH,EAAQ,uBAAD,OAAwBwH,GAAU,MAAO,KAAM,CACrEtF,cAAc,UAAD,OAAYhB,EAAMxC,SAF7B,OACAgC,EADA,OAKNiL,EAAUjL,EAAKqN,OAAOhC,MAAK,SAAAgC,GACvBoB,EAAe,CAACpB,QAAOpP,KAAM+B,EAAK/B,OAClC0Q,EAAe3O,EAAK/B,KAAKkQ,UAAU9M,SAASb,EAAMvC,KAAKwE,SAPrD,2CASP,IAEHnB,qBAAU,WACFkN,GACAvD,EAAUuD,EAAYvQ,KAAK4E,YAAYwI,MAAK,SAAAC,GACxCyB,EAAoBzB,QAG7B,CAACkD,IAEJ,IAAMK,EAAU,uCAAG,sBAAApP,EAAA,sEACTH,EAAQ,wBAAyB,MAAO,CAACwP,SAAUhI,GAAS,CAC9DtF,cAAc,UAAD,OAAYhB,EAAMxC,SAFpB,OAKfyQ,GAAe,SAAApG,GAEX,OADAA,EAAKpK,KAAKkQ,UAAUnL,KAAK,IAClBqF,KAGXsG,GAAe,GAVA,2CAAH,qDAaVI,EAAY,uCAAG,sBAAAtP,EAAA,sEACXH,EAAQ,0BAA2B,MAAO,CAAC0P,WAAYlI,GAAS,CAClEtF,cAAc,UAAD,OAAYhB,EAAMxC,SAFlB,OAKjByQ,GAAe,SAAApG,GAEX,OADAA,EAAKpK,KAAKkQ,UAAUc,MACb5G,KAGXsG,GAAe,GAVE,2CAAH,qDAuElB,OACI,mCAEKH,EAGD,sBAAK5M,UAAU,eAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,qBAAKA,UAAU,SAAf,SACI,qBAAKE,MAAOgL,EAAkBlK,IAAK4L,EAAYvQ,KAAK4E,WAAYgI,IAAI,OAExE,sBAAKjJ,UAAU,OAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,6BAAK4M,EAAYvQ,KAAK6E,cACtB,sBAAKlB,UAAU,cAAf,UAEQ8M,EACA,wBAAQhM,QAASqM,EAAjB,sBAEA,wBAAQrM,QAASmM,EAAjB,oBAGJ,sBAAKjN,UAAU,mBAAf,UACI,uBAKIpE,KAAK,OACL0E,YAAY,uBAChB,iCAIQ,mBAAGN,UAAW,iBAAkBE,MAAO,CAAC2G,SAAU,OAAQK,OAAQ,UAAWN,MAAO,QAApF,6BAIpB,sBAAK5G,UAAU,aAAf,UACI,+BAAI,iCAAS4M,EAAYnB,MAAM9K,SAA/B,YACA,+BAAI,iCAASiM,EAAYvQ,KAAKkQ,UAAU5L,SAAxC,gBACA,+BAAI,iCAASiM,EAAYvQ,KAAKmQ,UAAU7L,SAAxC,yBAIZ,sBAAKX,UAAU,oBAAf,UACI,+BAAI,iCAAS4M,EAAYnB,MAAM9K,SAA/B,YACA,+BAAI,iCAASiM,EAAYvQ,KAAKkQ,UAAU5L,SAAxC,gBACA,+BAAI,iCAASiM,EAAYvQ,KAAKmQ,UAAU7L,SAAxC,mBAEJ,qBAAKX,UAAU,mBAAf,SAEC4M,EAAYnB,MAAM7K,KAAI,SAAAgH,GAAI,OAAI,qBAAK9G,QAAS,WAAOyK,EAAgB3D,GAAO0C,GAAoB,IAAhE,SAAuF,8BAAK,qBAAKtJ,IAAK4G,EAAKoB,QAASC,IAAI,GAAI/I,MAAO0H,EAAK8B,YAA3D9B,EAAK/G,UAE/GyK,GAAgBjB,GAAqB,qCACnC,qBAAKvJ,QAAS,kBAAMwJ,GAAoB,IAAQtK,UAAU,wBAC1D,sBAAKA,UAAU,eAAf,UACI,mBAAGc,QAAS,kBAAMwJ,GAAoB,IAAQtK,UAAW,2BAAzD,mBACA,cAAC,EAAD,CAAU4H,KAAM0D,aAtD5B,cAAC,EAAD,SCxCG7M,G,MAAAA,aAPO,SAACxC,GACnB,MAAO,CACHG,MAAOH,EAAMgB,KAAKb,MAClBC,KAAMJ,EAAMgB,KAAKZ,QAIVoC,EA/ED,SAACG,GAAW,IAAD,EACgBxB,IAAvBM,GADO,EACdF,MADc,EACPE,SADO,KACEc,WACenB,mBAAS,KAF1B,mBAEd0B,EAFc,KAEDC,EAFC,OAGa3B,oBAAS,GAHtB,mBAGdiQ,EAHc,KAGHC,EAHG,OAIelQ,mBAAS,IAJxB,mBAId4B,EAJc,KAIFC,EAJE,OAKW7B,mBAAS,IALpB,mBAKdmQ,EALc,KAKJC,EALI,KA6BrB,OAtBA/N,oBAAS,sBAAC,4BAAA7B,EAAA,sEAEF0P,GAAa,GAFX,SAGkB7P,EAAQ,uBAAwB,MAAO,KAAM,CAACkC,cAAc,UAAD,OAAYhB,EAAMxC,SAH/F,OAGIyD,EAHJ,OAIF4N,EAAY5N,GACZ0N,GAAa,GALX,gDAMSzN,QAAQC,IAAR,MANT,yDAOP,IAEHL,oBAAS,sBAAC,4BAAA7B,EAAA,0DACFkB,EADE,iCAGEwO,GAAa,GAHf,SAIsB7P,EAAQ,+BAAgC,OAAQ,CAACiC,MAAOZ,GAAc,CAACa,cAAc,UAAD,OAAYhB,EAAMxC,SAJ5H,OAIQyD,EAJR,OAKEX,EAAcW,GACd0N,GAAa,GANf,kDAOazN,QAAQC,IAAR,MAPb,gCASFb,EAAc,IATZ,0DAWP,CAACH,IAGA,sBAAKiB,UAAU,aAAf,UACI,sBAAKA,UAAU,cAAf,UACI,mBAAGA,UAAU,iBAAiBE,MAAO,CAACC,SAAU,WAAYC,IAAK,MAAOC,UAAW,oBAAnF,oBACA,uBAAOzE,KAAK,OAAO0E,YAAY,YAAYN,UAAU,eAAeQ,MAAOzB,EAAa0B,SAAU,SAACpB,GAAD,OAAOL,EAAeK,EAAEqB,OAAOF,aAGvG,IAAtBvB,EAAW0B,OACX,qBAAKX,UAAU,mBAAf,SACKf,EAAW2B,KAAI,SAAAvE,GACZ,OACI,cAAC,IAAD,CAAM4D,GAAIrB,EAAMvC,KAAKwE,MAAQxE,EAAKwE,IAAM,YAAcxE,EAAKwE,IAAM,WAE7DC,QAAS,kBAAM9B,EAAe,KAFlC,SAGQ,gCACI,cAAC+B,EAAA,EAAD,CAAQC,IAAK3E,EAAK4E,aAClB,4BAAI5E,EAAK6E,kBAJZ7E,EAAKwE,UAW1B,qBAAKb,UAAU,mBAAf,SACKwN,EAAS5M,KAAI,SAAAvE,GACV,OACI,cAAC,IAAD,CAAM4D,GAAIrB,EAAMvC,KAAKwE,MAAQxE,EAAKwE,IAAM,YAAcxE,EAAKwE,IAAM,WAE7DC,QAAS,kBAAM9B,EAAe,KAFlC,SAGQ,gCACI,cAAC+B,EAAA,EAAD,CAAQC,IAAK3E,EAAK4E,aAClB,4BAAI5E,EAAK6E,kBAJZ7E,EAAKwE,UAW7ByM,GAAa,cAAC,EAAD,WChCf7O,I,YAAAA,aAJS,SAACxC,GAAD,MAAY,CAChCG,MAAOH,EAAMgB,KAAKb,SAGPqC,EAnCE,SAACG,GAAW,IAAD,EACQvB,mBAAS,IADjB,mBACjBqQ,EADiB,KACPC,EADO,OAEMtQ,oBAAS,GAFf,mBAEjBC,EAFiB,KAERC,EAFQ,OAGaH,IAAvBM,GAHU,EAGjBF,MAHiB,EAGVE,SAHU,EAGDc,WAUvB,OARAkB,oBAAS,sBAAC,4BAAA7B,EAAA,sEACaH,EAAQ,uBAAwB,MAAO,KAAM,CAC5DkC,cAAc,UAAD,OAAYhB,EAAMxC,SAF7B,OACAgC,EADA,OAINuP,EAAYvP,EAAKqN,OACjBlO,GAAW,GALL,2CAMP,IAGC,mCACKD,EACG,cAAC,EAAD,IAEA,qBAAK0C,UAAU,YAAf,SAII,qBAAKA,UAAU,mBAAf,SACK0N,EAAS9M,KAAI,SAAAgH,GAAI,OAAI,cAAC,EAAD,CAAUA,KAAMA,GAAWA,EAAK/G,kB,SCyH/DpC,I,MAAAA,aAdO,SAACxC,GACnB,MAAO,CACHG,MAAOH,EAAMgB,KAAKb,UAID,SAACsC,GACtB,MAAO,CACHwL,MAAO,SAAC9N,EAAOC,GACXqC,EAASpC,EAAQF,EAAOC,QAKrBoC,EAjJE,SAACG,GAAW,IAClBsL,EAAStL,EAATsL,MADiB,EAEa9M,IAAvBM,GAFU,EAEjBF,MAFiB,EAEVE,SAFU,KAEDc,WACOnB,oBAAS,IAHf,mBAGjBC,EAHiB,KAGRC,EAHQ,OAIAF,mBAAS,CAC7BuQ,MAAO,GACP1M,YAAa,GACb2M,SAAU,KAPU,mBAIjBC,EAJiB,KAIXC,EAJW,OASwB1Q,oBAAS,GATjC,mBASjB2Q,EATiB,KASCC,EATD,KAWxBvO,qBAAU,WACN,IAAMtB,EAAOzB,KAAKyP,MAAM3P,eAAe4P,QAAQ,gBAE3CjO,GAAQA,EAAKhC,OACb8N,EAAM9L,EAAKhC,MAAOgC,EAAK/B,QAE5B,CAAC6N,IAEJ,IAAMgE,EAAgB,SAAA7O,GAClB0O,EAAQ,2BAAID,GAAL,mBAAYzO,EAAEqB,OAAOiD,KAAOtE,EAAEqB,OAAOF,UAG1C2N,EAAe,uCAAG,sBAAAtQ,EAAA,sEAEhBN,GAAW,GAFK,SAGVG,EAAQ,qBAAsB,OAAvB,eAAmCoQ,GAAO,CAAClO,cAAc,UAAD,OAAYhB,EAAMxC,SAHvE,OAIhBmB,GAAW,GACX6Q,IALgB,gDAOhBnC,MAAM,EAAD,IACL1O,GAAW,GARK,yDAAH,qDAYf8Q,EAAY,uCAAG,4BAAAxQ,EAAA,sEAEbN,GAAW,GAFE,SAGMG,EAAQ,kBAAmB,OAApB,eAAgCoQ,GAAO,CAAClO,cAAc,UAAD,OAAYhB,EAAMxC,SAHpF,OAGPgC,EAHO,OAKb8L,EAAM9L,EAAKhC,MAAOgC,EAAK/B,MALV,gDAOb4P,MAAM,KAAI1N,SACVhB,GAAW,GARE,yDAAH,qDAYZ6Q,EAAoB,WACtBH,GAAqBD,IAGzB,OACI,mCACK1Q,EACG,cAAC,EAAD,IAEA,sBAAK0C,UAAU,eAAf,UACI,qBAAKA,UAAU,OAAf,SACI,0BAASA,UAAU,OAAnB,UACI,wCACA,0DAGR,qBAAKA,UAAU,QAAf,SACI,iCACI,0BAASA,UAAU,OAAnB,UACI,uCAAUgO,EAAmB,KAAO,QACpC,qBAAKhO,UAAU,kBAAf,SACKgO,EACG,0DAA4B,mBAAGlN,QAASsN,EAAZ,SAA+B,mDAE3D,wDAA0B,mBAAGtN,QAASsN,EAAZ,SAA+B,wDAIpEJ,GAAoB,sBAAKhO,UAAU,uBAAf,UACjB,uBAAOsO,QAAQ,cAAf,sBACA,uBACI3K,KAAK,cACLpD,GAAG,cACH3E,KAAK,OACL4E,MAAOsN,EAAK5M,YACZT,SAAUyN,EACVvB,UAAQ,EACRrM,YAAY,0BACZiO,UAAU,IACVC,UAAU,UAElB,sBAAKxO,UAAU,wBAAf,UACI,uBAAOsO,QAAQ,QAAf,mBACA,uBACI3K,KAAK,QACLpD,GAAG,QACH3E,KAAK,QACL4E,MAAOsN,EAAKF,MACZnN,SAAUyN,EACVvB,UAAQ,OAEhB,sBAAK3M,UAAU,2BAAf,UACI,uBAAOsO,QAAQ,WAAf,sBACA,uBACI3K,KAAK,WACLpD,GAAG,WACH3E,KAAK,WACL4E,MAAOsN,EAAKD,SACZpN,SAAUyN,EACV5N,YAAY,yBACZqM,UAAQ,EACR4B,UAAU,MACd,mBAAGvO,UAAU,wBAEhBgO,EACG,wBAAQhO,UAAU,aAAapE,KAAK,SAASkF,QAASqN,EAAtD,qBAEA,wBAAQnO,UAAU,aAAapE,KAAK,SAASkF,QAASuN,EAAtD,qBAEJ,yBAASrO,UAAU,aAAnB,SACI,4BACI,uBAAMA,UAAU,QAAhB,oDAC2C,uBAAK,+CADhD,MACwE,iDADxE,yBC1DrBvB,gBAZS,SAACxC,GAAD,MAAY,CAChCG,MAAOH,EAAMgB,KAAKb,UAGK,SAACsC,GACxB,MAAO,CACHwL,MAAO,SAAC9N,EAAOC,GACXqC,EAASpC,EAAQF,EAAOC,QAKrBoC,EAzDH,SAACG,GACT,IAAMR,EAAOzB,KAAKyP,MAAM3P,eAAe4P,QAAQ,gBACzCoC,EAAMvK,iBAAO,MAEbwK,IAAoB9P,EAAMxC,MAC1BuS,ECLF,eAAC,IAAD,WACI,cAAC,IAAD,CAAOnP,KAAK,WAAWoP,UAAWC,IAClC,cAAC,IAAD,CAAOC,OAAK,EAACtP,KAAK,WAAWuP,OAAS,kBAAM,cAAC,EAAD,OAC5C,cAAC,IAAD,CAAOD,OAAK,EAACtP,KAAK,mBAAmBuP,OAAS,kBAAM,cAACC,EAAD,OACpD,cAAC,IAAD,CAAOF,OAAK,EAACtP,KAAK,SAASuP,OAAS,kBAAM,cAAC,EAAD,OAC1C,cAAC,IAAD,CAAOD,OAAK,EAACtP,KAAK,IAAIoP,UAAWK,QDczC,SAASC,IACL,IACIT,EAAInK,QAAQpE,MAAMyG,OAASxH,SAASpB,KAAKoR,cAAgBT,EAAkB,GAAK,GAAK,KACvF,WAGN,OAlBItQ,GAAQA,EAAKhC,OACbwC,EAAMsL,MAAM9L,EAAKhC,MAAOgC,EAAK/B,MAGjCqD,qBAAU,WAKN,OAJAwP,IAEA5I,OAAOC,iBAAiB,SAAU2I,GAE3B,kBAAM5I,OAAOE,oBAAoB,SAAU0I,MACnD,CAACR,IASA,cAAC,IAAD,UACMA,EAGE,mCACI,sBAAK1O,UAAU,OAAf,UACI,cAAC,EAAD,IACA,qBAAK0E,IAAK+J,EAAKzO,UAAU,MAAzB,SACI,qBAAKA,UAAU,YAAf,SACK2O,WAPjB,cAAC,IAAD,CAAOnP,KAAK,IAAIsP,OAAK,EAACF,UAAWQ,UE9B7CC,GAA0B,IAArB/I,OAAOgJ,YAChBnQ,SAASoQ,gBAAgBrP,MAAMsP,YAAY,OAA3C,UAAsDH,GAAtD,OAEA/I,OAAOC,iBAAiB,UAAU,WAChC,IAAI8I,EAA0B,IAArB/I,OAAOgJ,YAChBnQ,SAASoQ,gBAAgBrP,MAAMsP,YAAY,OAA3C,UAAsDH,EAAtD,UAGFI,IAASV,OACL,cAAC,IAAD,CAAU7R,MAAOA,EAAjB,SACI,cAAC,GAAD,MAEFiC,SAASuQ,eAAe,W","file":"static/js/main.a6bd1b28.chunk.js","sourcesContent":["let initialState = {\r\n    dialogs: [],\r\n    messages: [],\r\n    chat: {},\r\n    isDialogSelected: false\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'SEND_MESSAGE':\r\n            return {\r\n                ...state\r\n            }\r\n        case 'SET_MESSAGES':\r\n            return {\r\n                ...state,\r\n                newMessageBody: '',\r\n                messages: action.messages\r\n            };\r\n        case 'SET_DIALOGS':\r\n            return {\r\n                ...state,\r\n                dialogs: action.dialogs\r\n            };\r\n        case 'SET_CHAT':\r\n            return {\r\n                ...state,\r\n                chat: action.chat\r\n            };\r\n        case 'SET_IS_DIALOG_SELECTED':\r\n            return {\r\n                ...state,\r\n                isDialogSelected: action.isDialogSelected\r\n        };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = () => ({type: 'SEND_MESSAGE'});\r\nexport const setMessagesAC = (messages) => ({type: 'SET_MESSAGES', messages});\r\nexport const setDialogsAC = (dialogs) => ({type: 'SET_DIALOGS', dialogs});\r\nexport const setChatAC = (chat) => ({type: 'SET_CHAT', chat});\r\nexport const setIsDialogSelectedAC = (isDialogSelected) => ({type: 'SET_IS_DIALOG_SELECTED', isDialogSelected});\r\n\r\nexport default dialogsReducer;","let initialState = {\r\n    token: null,\r\n    user: {}\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'LOGIN':\r\n            sessionStorage.setItem('storageName', JSON.stringify({\r\n                token: action.jwtSecret,\r\n                user: action.user\r\n            }));\r\n            \r\n            return {\r\n                ...state,\r\n                token: action.jwtSecret,\r\n                user: action.user\r\n            }\r\n        case 'LOGOUT':\r\n            sessionStorage.removeItem('storageName');\r\n\r\n            return {\r\n                ...state,\r\n                token: null,\r\n                user: {}\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const loginAC = (jwtSecret, user) => ({type: 'LOGIN', jwtSecret, user});\r\nexport const logoutAC = () => ({type: 'LOGOUT'});\r\nexport default authReducer;","import {combineReducers, createStore} from \"redux\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\n\r\nconst reducers = combineReducers({\r\n    dialogsPage: dialogsReducer,\r\n    auth: authReducer\r\n});\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const request = useCallback( async (url, method = 'GET', body = null, headers = {}) => {\r\n        try {\r\n            if (body) {\r\n                body = JSON.stringify(body);\r\n                headers['Content-Type'] = 'application/json';\r\n            }\r\n\r\n            // const res = await fetch(`http://localhost:5000${url}`, {method, body, headers});\r\n            const res = await fetch(`https://kalinaserver.herokuapp.com${url}`, {method, body, headers});\r\n            const data = await res.json();\r\n\r\n            if (!res.ok) {\r\n                throw new Error(data.message || 'Something goes wrong');\r\n            }\r\n\r\n            setLoading(false);\r\n\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n    \r\n    return {loading, error, request, clearError};\r\n} ","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport { logoutAC } from '../../redux/auth-reducer';\r\nimport './Header.scss';\r\nimport { Avatar } from '@material-ui/core';\r\n\r\nconst Header = (props) => {\r\n    const {logout} = props;\r\n    const history = useHistory();\r\n    const {error, request, clearError} = useHttp();\r\n    const [searchUsers, setSearchUsers] = useState('');\r\n    const [foundUsers, setFoundUsers] = useState([]);\r\n\r\n    const logoutHandler = (e) => {\r\n        e.preventDefault();\r\n        logout(); \r\n        history.push('/');\r\n    };\r\n\r\n    document.onmouseup = (e) => {\r\n        const searchUser = document.querySelector('.search-user');\r\n        if (!e.path.includes(searchUser)) {\r\n            setFoundUsers([]);\r\n            setSearchUsers('');\r\n        }\r\n    }\r\n    \r\n    useEffect(async () => {\r\n        if (searchUsers) {\r\n            try{\r\n                const users = await request('/api/users/post/users-search', 'POST', {query: searchUsers}, {Authorization: `Bearer ${props.token}`});\r\n                setFoundUsers(users);\r\n            } catch (err) {console.log(err)}\r\n        } else {\r\n            setFoundUsers([]);\r\n        }\r\n    }, [searchUsers]);\r\n\r\n    return (\r\n        <div className='header-wrapper'>\r\n            <div className='header'>\r\n                <span className=\"label\"><Link to=\"/\"><big>Kalina</big></Link></span>\r\n                <div className=\"search-user\">\r\n                    <i className=\"material-icons\" style={{position: 'absolute', top: '50%', transform: 'translateY(-50%)'}}>search</i>\r\n                    <input type=\"text\" placeholder=\"Search users...\" id=\"search-input\" value={searchUsers} onChange={(e) => setSearchUsers(e.target.value)}/>\r\n                    {\r\n                        foundUsers.length !== 0 &&\r\n                        <div className=\"dropdown-content\">\r\n                            {foundUsers.map(user => <Link to={props.user._id !== user._id ? '/profile/' + user._id : '/profile'}  key={user._id} onClick={() => setSearchUsers('')}><div><Avatar src={user.profileImg}/><p>{user.displayName}</p></div></Link>)}\r\n                        </div> \r\n                    }\r\n                </div>\r\n                <div className=\"navigation\">\r\n                    <Link to=\"/\"><i className=\"material-icons\">home</i></Link>\r\n                    <Link to=\"/profile\"><i className=\"material-icons\">person</i></Link>\r\n                    <Link to=\"/dialogs\"><i className=\"material-icons\">message</i></Link>\r\n                    <Link to=\"/users\"><i className=\"material-icons\">people</i></Link>\r\n                    <Link to=\"/\" onClick={logoutHandler}><i className=\"material-icons\">exit_to_app</i></Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        token: state.auth.token,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        logout: () => {\r\n            dispatch(logoutAC());\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","const toLocalDate = (t) => {\r\n    const date = new Date(t);\r\n    const dateWithOffset = new Date(date.getTime() - (date.getTimezoneOffset() * 60000)).toISOString();\r\n    const temp = dateWithOffset.split('T');\r\n    return {date: temp[0], time: temp[1].replace(/:\\d+\\..*$/g, '')}\r\n};\r\n\r\nexport default toLocalDate;\r\n\r\n// temp[0].replace(/^\\d+-/g, '')","import React, { useEffect, useState } from 'react';\r\nimport './DialogItem.scss';\r\nimport { Avatar } from '@material-ui/core';\r\nimport Pusher from 'pusher-js';\r\nimport { setChatAC, setDialogsAC, setIsDialogSelectedAC, setMessagesAC } from \"../../../redux/dialogs-reducer\";\r\nimport { connect } from 'react-redux';\r\nimport { useHttp } from '../../../hooks/http.hook';\r\nimport toLocalDate from '../../../hooks/toLocalDate.hook';\r\n\r\nconst pusher = new Pusher('b634efb073fba40fbf3a', {\r\n    cluster: 'eu'\r\n});\r\n\r\nconst DialogItem = (props) => {\r\n    const {loading, error, request, clearError} = useHttp();\r\n    const [dialogsLastMsg, setDialogsLastMsg] = useState({});\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [extra, setExtra] = useState({});\r\n\r\n    useEffect(() => {\r\n        props.extra.forEach(el => {\r\n            if (el.id !== props.user._id) {\r\n                setExtra(el);\r\n            }\r\n        });\r\n        \r\n        return () =>  props.setIsDialogSelected(false);\r\n    }, []);\r\n\r\n    const getLastMessage = async () => {\r\n        try {\r\n            const data = await request(`/api/chats/get/lastMessage?id=${props.id}`, 'GET', null, {Authorization: `Bearer ${props.token}`});\r\n            setDialogsLastMsg(data);\r\n            setIsLoaded(true);\r\n        } catch(err) {console.log(err)}\r\n    }\r\n\r\n    useEffect(() => {\r\n        getLastMessage();\r\n        \r\n        const channel = pusher.subscribe('messages');\r\n        channel.bind('newMessage', () => {\r\n            getLastMessage();   \r\n        });\r\n\r\n        return () => {\r\n            channel.unbind_all();\r\n            channel.unsubscribe();\r\n        };\r\n    }, [props.id]);\r\n\r\n    const selectedDialog = async () => {\r\n        try {\r\n            const data = await request(`/api/chats/get/conversation?id=${props.id}`, 'GET', null, {Authorization: `Bearer ${props.token}`});\r\n            props.setMessages(data.conversation);\r\n            props.setChat({\r\n                chatName: extra.displayName || data.chatName,\r\n                chatImg: extra.profileImg || data.chatImg,\r\n                participantId: extra.id,\r\n                chatId: props.id\r\n            });\r\n            props.setIsDialogSelected(true);\r\n        } catch(err) {console.log(err)}\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isLoaded &&\r\n            <div onClick={selectedDialog} className='dialogItem'>\r\n                <div className='dialogItem__info'>\r\n                    <div className='dialogItem__info-avatar'><Avatar src={extra.profileImg}/></div>\r\n                    <div className='dialogItem__info-main'>\r\n                        <div><h1>{props.name || extra.displayName}</h1></div>\r\n                        <span className='dialogItem__info-message'>{dialogsLastMsg.owner.displayName}: {dialogsLastMsg.message}</span>\r\n                    </div>\r\n                    <div className=\"timeStamp\">\r\n                        <div>{toLocalDate(parseInt(dialogsLastMsg.timestamp)).date}</div>\r\n                        <div>{toLocalDate(parseInt(dialogsLastMsg.timestamp)).time}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        token: state.auth.token,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setDialogs: (dialogs) => {\r\n            dispatch(setDialogsAC(dialogs));\r\n        },\r\n        setMessages: (messages) => {\r\n            dispatch(setMessagesAC(messages));\r\n        },\r\n        setChat: chat => {\r\n            dispatch(setChatAC(chat))\r\n        },\r\n        setIsDialogSelected: (a) => {\r\n            dispatch(setIsDialogSelectedAC(a))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DialogItem);","import React from 'react';\r\nimport './Spinner.scss';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Spinner;","import React, { useEffect, useRef } from 'react';\r\n// import ChatIcon from '@material-ui/icons/Chat';\r\n// import DonutLargeIcon from '@material-ui/icons/DonutLarge';\r\n// import MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport \"./Dialogs.scss\";\r\n// import { IconButton, Avatar } from '@material-ui/core';\r\nimport { SearchOutlined } from '@material-ui/icons';\r\nimport DialogItem from './DialogItem';\r\nimport { Button } from '@material-ui/core';\r\nimport Pusher from 'pusher-js';\r\nimport { useHttp } from '../../../hooks/http.hook';\r\nimport { setDialogsAC } from '../../../redux/dialogs-reducer';\r\nimport { connect } from 'react-redux';\r\nimport { useState } from 'react';\r\nimport Spinner from '../../../components/Spinner/Spinner';\r\n\r\nconst pusher = new Pusher('b634efb073fba40fbf3a', {\r\n    cluster: 'eu'\r\n});\r\n\r\nconst DialogsList = (props) => {    \r\n    const {error, request, clearError} = useHttp();\r\n    const [loading, setLoading] = useState(true);\r\n    const [searchChats, setSearchChats] = useState('');\r\n    const dialogs = useRef(null);\r\n    const dialogsHeader = useRef(null);\r\n    const dialogsItems = useRef(null);\r\n\r\n    const getDialogs = async () => {\r\n        try {\r\n            const data = await request('/api/chats/get/conversations', 'GET', null, {\r\n                Authorization: `Bearer ${props.token}`,\r\n            });\r\n            props.setDialogs(data);\r\n            setLoading(false);\r\n        } catch(err) {console.log(err)}\r\n    }\r\n    \r\n    useEffect(() => {\r\n        !props.isDialogSelected ? dialogs.current.classList.add('show') : dialogs.current.classList.remove('show');\r\n    }, [props.isDialogSelected])\r\n    \r\n    useEffect(() => {\r\n        getDialogs();\r\n        \r\n        const channel = pusher.subscribe('chats');\r\n        channel.bind('newChat', () => {\r\n            getDialogs();\r\n        });\r\n    }, []);\r\n    \r\n    return (\r\n            <div ref={dialogs} className={'dialogs show'}>\r\n                <div ref={dialogsHeader} className='dialogs__header'>\r\n                    <div className=\"search-chats\">\r\n                        <i className=\"material-icons\" style={{position: 'absolute', top: '50%', transform: 'translateY(-50%)', paddingLeft: '5px'}}>search</i>\r\n                        <input type=\"text\" placeholder=\"Search the chat or start new\" id=\"search-chats-input\" value={searchChats} onChange={(e) => setSearchChats(e.target.value)}/>\r\n                        <i className=\"material-icons\" style={{position: 'absolute', top: '50%', right: '0', transform: 'translateY(-50%)', paddingRight: '5px', opacity: '.5'}}>add</i>\r\n                    </div>\r\n                </div>\r\n                <div ref={dialogsItems} className='dialogs__items'>\r\n                {\r\n                    loading ? \r\n                    <Spinner />\r\n                    :\r\n                    props.dialogs.map(dialog => <DialogItem name={dialog.name} img={dialog.chatImg} key={dialog.id} id={dialog.id} timestamp={dialog.timestamp} extra={dialog.extra}/> )\r\n                }\r\n                </div>\r\n            </div>\r\n    )  \r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        isDialogSelected: state.dialogsPage.isDialogSelected,\r\n        user: state.auth.user,\r\n        token: state.auth.token\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setDialogs: (dialogs) => {\r\n            dispatch(setDialogsAC(dialogs));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DialogsList);","import React from 'react';\r\nimport toLocalDate from '../../../hooks/toLocalDate.hook';\r\nimport './MessageItem.scss';\r\n\r\nconst Message = (props) => {\r\n    const timestamp = toLocalDate(parseInt(props.message.timestamp));\r\n    \r\n    return (\r\n        <div className={`messages__item  ${props.message.owner._id === props.userId && 'messages__receiver'}`}>\r\n            <span className='message__name'>{props.message.owner.displayName}</span>\r\n            <div className='message'>{props.message.message}</div>\r\n            <span className='message__timestamp'>{timestamp.date + ' ' + timestamp.time}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport './SpinnerSmall.scss';\r\n\r\nconst SpinnerSmall = () => {\r\n    return (\r\n        <div className=\"loadingio-spinner-spinner-owwc8nyxhkf\">\r\n            <div className=\"ldio-wt50jy4ikwl\">\r\n                <div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SpinnerSmall;","import { Avatar, IconButton } from '@material-ui/core';\r\nimport { AttachFile, InsertEmoticon, MoreVert, SearchOutlined } from '@material-ui/icons';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport './Messages.scss';\r\nimport Pusher from 'pusher-js';\r\nimport MessageItem from './MessageItem';\r\nimport { useHttp } from '../../../hooks/http.hook';\r\nimport Picker from 'emoji-picker-react';\r\nimport { Link } from 'react-router-dom';\r\nimport SpinnerSmall from '../../../components/Spinner/SpinnerSmall';\r\n\r\nconst MessagesList = (props) => {\r\n    const {loading, error, request, clearError} = useHttp();\r\n    const [newMessage, setNewMessage] = useState('');\r\n    const [isOpenedEmoji, setIsOpenedEmoji] = useState(false);\r\n    const [isSendingNewMessage, setIsSendingNewMessage] = useState(false);\r\n    const [chosenEmoji, setChosenEmoji] = useState(null);\r\n    const inputMessage = useRef(null);\r\n\r\n    const onEmojiClick = (event, emojiObject) => {\r\n        setChosenEmoji(emojiObject);\r\n    };\r\n    \r\n    useEffect(() => {\r\n        document.onmouseup = (e) => {\r\n            inputMessage.current.focus();\r\n            const emojiDiv = document.querySelector('.emojiDiv');\r\n            if (!e.path.includes(emojiDiv)) {\r\n                setIsOpenedEmoji(false);\r\n            }\r\n        }\r\n        \r\n        return () => document.onmouseup = null;\r\n    }, [isOpenedEmoji]);\r\n    \r\n    const onSendMessageClick = async () => {\r\n        setNewMessage('');\r\n        setIsOpenedEmoji(false);\r\n        setIsSendingNewMessage(true);\r\n        try {\r\n            await request(`/api/chats/new/message?id=${props.chat.chatId}`, 'POST', {\r\n                message: newMessage,\r\n                timestamp: Date.now()\r\n            }, {Authorization: `Bearer ${props.token}`});\r\n        } catch(err) {console.log(err)}\r\n    }\r\n\r\n    const fixScroll = () => {\r\n        try {\r\n            const block = document.querySelector('.messages__body');\r\n            block.scrollTop = block.scrollHeight;\r\n        } catch{}\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', () => fixScroll());\r\n        inputMessage.current.focus();\r\n        \r\n        return () => window.removeEventListener('resize', () => fixScroll());\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const pusher = new Pusher('b634efb073fba40fbf3a', {\r\n            cluster: 'eu'\r\n        });\r\n      \r\n        const channel = pusher.subscribe('messages');\r\n        channel.bind('newMessage', async () => {\r\n            try {\r\n                const data = await request(`/api/chats/get/conversation?id=${props.chat.chatId}`, 'GET', null, {Authorization: `Bearer ${props.token}`});\r\n                props.setMessages(data.conversation);\r\n                fixScroll();\r\n                setIsSendingNewMessage(false);\r\n            } catch {}\r\n        });\r\n\r\n        fixScroll();\r\n\r\n        return () => {\r\n            channel.unbind_all();\r\n            channel.unsubscribe();\r\n        };\r\n    }, [props.chat.chatId]);\r\n\r\n    useEffect(() => {\r\n        if (chosenEmoji)\r\n        setNewMessage(prev => prev + chosenEmoji.emoji);\r\n    }, [chosenEmoji]);\r\n\r\n    return (\r\n        <div className='messages'>\r\n            <div className='messages__header'>\r\n                <div className=\"btnBack\" style={{height: '50px', width: '30px'}}>\r\n                    <i onClick={() => props.setIsDialogSelected(false)} className=\"material-icons\" style={{fontSize: '50px', position: 'absolute', left: '-5px'}}>chevron_left</i>\r\n                </div>\r\n                <div className='messages__headerInfo'>\r\n                    <Link  to={'/profile/' + props.chat.participantId}>\r\n                        <Avatar src={props.chat.chatImg}/>\r\n                        <div><p>{props.chat.chatName}</p></div>\r\n                    </Link>\r\n                </div>\r\n                <div className='messages__headerRight'>\r\n                    <IconButton>\r\n                        <SearchOutlined/>\r\n                    </IconButton>\r\n                    {/* <IconButton>\r\n                        <AttachFile/>\r\n                    </IconButton> */}\r\n                    <IconButton>\r\n                        <MoreVert/>\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n            <div className='messages__body'>\r\n                { props.messages.map( message => <MessageItem userId={props.user._id} message={message} key={message._id} /> ) }\r\n            </div>\r\n            <div className='messages__footer'>\r\n                <i onClick={() => setIsOpenedEmoji(!isOpenedEmoji)} \r\n                    className={\"material-icons emojicon\"} \r\n                    style={{fontSize: '35px', cursor: 'pointer', width: '35px'}} >insert_emoticon</i>\r\n                <input \r\n                    ref={inputMessage}\r\n                    value={newMessage} \r\n                    onChange={e => {setNewMessage(e.target.value); setIsOpenedEmoji(false);}} \r\n                    onKeyUp={e => (e.keyCode === 13 && newMessage) ? onSendMessageClick() : false} \r\n                    type='text' \r\n                    placeholder='Enter your message'/>\r\n                <button onClick={onSendMessageClick} disabled={!newMessage}>\r\n                    <i className={\"material-icons\"} style={{fontSize: '35px', cursor: 'pointer', width: '35px'}}>send</i>\r\n                    {isSendingNewMessage && <SpinnerSmall />}\r\n                </button>\r\n            </div>\r\n            {isOpenedEmoji && \r\n            <div className='emojiDiv' style={{position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', zIndex: '1000'}}>\r\n                <Picker disableAutoFocus={true} onEmojiClick={onEmojiClick} />\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessagesList;","import {sendMessageCreator, setChatAC, setIsDialogSelectedAC, setMessagesAC} from \"../../../redux/dialogs-reducer\";\r\nimport MessagesList from \"./Messages\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.dialogsPage.messages,\r\n        chat: state.dialogsPage.chat,\r\n        user: state.auth.user,\r\n        token: state.auth.token\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: () => {\r\n            dispatch(sendMessageCreator());\r\n        },\r\n        setMessages: (messages) => {\r\n            dispatch(setMessagesAC(messages));\r\n        },\r\n        setChat: chat => {\r\n            dispatch(setChatAC(chat))\r\n        },\r\n        setIsDialogSelected: (a) => {\r\n            dispatch(setIsDialogSelectedAC(a))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MessagesList);\r\n","import React from 'react';\r\nimport './DialogsPage.scss';\r\nimport Dialogs from './Dialogs/Dialogs';\r\nimport Messages from './Messages/MessagesContainer';\r\nimport { connect } from 'react-redux';\r\n \r\nconst DialogsPage = (props) => {\r\n    return (\r\n        <div className='dialogs-page'>\r\n            <Dialogs />\r\n            {!props.isDialogSelected ? <div className='chooseChat'>Choose a chat</div> : <Messages />}\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isDialogSelected: state.dialogsPage.isDialogSelected\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DialogsPage);","import { connect } from 'react-redux';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { useState } from 'react';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport { Link } from 'react-router-dom';\r\nimport { Avatar } from '@material-ui/core';\r\nimport Picker from 'emoji-picker-react';\r\nimport toLocalDate from '../../hooks/toLocalDate.hook';\r\n\r\nconst PostItem = ({post, token, user}) => {\r\n    const {loading, error, request, clearError} = useHttp();\r\n    const [isLiked, setIsLiked] = useState(post.likes.includes(user._id));\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [likesCount, setLikesCount] = useState(post.likes.length);\r\n    const [comments, setComments] = useState(post.comments);\r\n    const [commentsCount, setCommentsCount] = useState(post.comments.length);\r\n    const [showAllComments, setShowAllComments] = useState(false);\r\n    const [newComment, setNewComment] = useState('');\r\n    const commentsField = useRef(null);\r\n    const [chosenEmoji, setChosenEmoji] = useState(null);\r\n    const [isOpenedEmoji, setIsOpenedEmoji] = useState(false);\r\n    const timestamp = toLocalDate(post.createdAt);\r\n\r\n    const onEmojiClick = (event, emojiObject) => setChosenEmoji(emojiObject);\r\n    \r\n    useEffect(() => {\r\n        document.onmouseup = (e) => {\r\n            const emojiDiv = document.querySelector('.emojiDiv');\r\n            if (!e.path.includes(emojiDiv)) {\r\n                setIsOpenedEmoji(false);\r\n            }\r\n        }\r\n\r\n        return () => document.onmouseup = null;\r\n    }, [isOpenedEmoji]);\r\n\r\n    useEffect(async () => {\r\n        if (isLoaded) {\r\n            const data = await request(`/api/posts/put/${isLiked ? 'like' : 'unlike'}`, 'PUT', {postId: post._id}, {Authorization: `Bearer ${token}`});\r\n            setLikesCount(data.likes.length);\r\n        }\r\n    }, [isLiked]);\r\n\r\n    const likeHandler = () => {\r\n        setIsLoaded(true);\r\n        setIsLiked(!isLiked);\r\n    }\r\n    \r\n    const newCommentHandler = async () => {\r\n        const data = await request(`/api/posts/put/comment`, 'PUT', {postId: post._id, text: newComment}, {Authorization: `Bearer ${token}`});\r\n        setComments(data.comments);\r\n        setNewComment('');\r\n        setCommentsCount(data.comments.length);\r\n        setIsOpenedEmoji(false);\r\n    }\r\n    \r\n    useEffect(() => {\r\n        commentsField.current.classList.toggle('show-comments');\r\n    }, [showAllComments]);\r\n\r\n    useEffect(() => {\r\n        if (chosenEmoji) setNewComment(prev => prev + chosenEmoji.emoji);\r\n    }, [chosenEmoji]);\r\n\r\n    return (\r\n        <div className='element'>\r\n            <div className='card'>\r\n                <div className='card-header'>\r\n                    <Link to={user._id !== post.owner._id ? '/profile/' + post.owner._id : '/profile'}><Avatar src={post.owner.profileImg}/><p>{post.owner.displayName}</p></Link>\r\n                </div>\r\n                <div className='card-image'>\r\n                    <img src={post.picture} alt=\"\"/>\r\n                </div>\r\n                <div className='card-content'>\r\n                    <i onClick={likeHandler} className={\"material-icons\"} style={{fontSize: '35px', cursor: 'pointer', color: 'red'}} >{isLiked ? 'favorite' : 'favorite_border'}</i>\r\n                    <small><strong>Likes: {likesCount}</strong></small>\r\n                    <p><strong>{post.owner.displayName}</strong> {post.body}</p>\r\n                    <div><strong className='show-comments-btn' onClick={() => setShowAllComments(!showAllComments)}>{!showAllComments ? 'Show' : 'Hide'} all comments ({commentsCount})</strong></div>\r\n                    <div className={'comments show-comments'} ref={commentsField}>\r\n                        {comments.map(item => <div key={item._id}><strong>{item.owner.displayName}</strong> {item.text}</div>)}\r\n                    </div>\r\n                    <div className='timestamp'>{timestamp.date + ' ' + timestamp.time}</div>\r\n                </div>\r\n                <div className='new-comment'>\r\n                    {isOpenedEmoji && \r\n                        <div className='emojiDiv' style={{position: 'absolute', bottom: '20px', left: '50%', transform: 'translate(-50%, -32px)', zIndex: '1000'}}>\r\n                            <Picker disableAutoFocus={true} onEmojiClick={onEmojiClick} />\r\n                        </div>\r\n                    }\r\n                    <i onClick={() => setIsOpenedEmoji(!isOpenedEmoji)} className={\"material-icons emojicon\"} style={{fontSize: '35px', cursor: 'pointer', width: '35px'}} >insert_emoticon</i>\r\n                    <input value={newComment} onChange={e => {setNewComment(e.target.value); setIsOpenedEmoji(false);}} onKeyUp={e => (e.keyCode === 13 && newComment) ? newCommentHandler() : false} type='text' placeholder='Add a comment...'/>\r\n                    <button onClick={newCommentHandler} disabled={!newComment}>Publish</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    token: state.auth.token,\r\n    user: state.auth.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(PostItem);","function imgParams(data) {\r\n    return new Promise((res, rej) => {\r\n        if (typeof(data) === 'string') {\r\n            solve(data).then(params => res(params));\r\n        } else {\r\n            if (data.length === 0) res(data);\r\n            \r\n            for (let i = 0; i < data.length; ++i){\r\n                solve(data[i].picture).then((params) => {\r\n                    data[i].params = params;\r\n                    \r\n                    if (i+1 === data.length) res(data);\r\n                });\r\n            }\r\n        }\r\n\r\n        function solve(src) {\r\n            let img = document.createElement('img');\r\n            img.src = src;\r\n            return new Promise((resolve, reject) => {\r\n                img.onload = () => { \r\n                    resolve(\r\n                        img.width >= img.height ? \r\n                        {height: '100%', minWidth: '100%', width: 'none', minHeight: 'none'} \r\n                        : \r\n                        {height: 'none', minWidth: 'none', width: '100%', minHeight: '100%'}\r\n                    );\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport default imgParams;","import { connect } from 'react-redux';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport './Profile.scss';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport { loginAC } from '../../redux/auth-reducer';\r\nimport PostItem from '../HomePage/PostItem';\r\nimport imgParams from '../../hooks/imgParams.hook';\r\n\r\n\r\nconst Profile = (props) => {\r\n    const {error, request, clearError} = useHttp();\r\n    const [isCreatePostOpen, setIsCreatePostOpen] = useState(false);\r\n    const [isPostDetailOpen, setIsPostDetailOpen] = useState(false);\r\n    const [isChangingProfileImage, setIsChangingProfileImage] = useState(false);\r\n    const [body, setBody] = useState('');\r\n    const [newPostImage, setNewPostImage] = useState('');\r\n    const [newProfileImage, setNewProfileImage] = useState('');\r\n    const [myPosts, setMyPosts] = useState(null);\r\n    const [followData, setFollowData] = useState(null);\r\n    const [profileImgParams, setProfileImgParams] = useState(null);\r\n    const [isChangesLoading, setIsChangesLoading] = useState(false);\r\n    const [selectedPost, setSelectedPost] = useState(null);\r\n    \r\n    useEffect(async () => {\r\n        const data = await request('/api/posts/get/myposts', 'GET', null, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        });\r\n        \r\n        const newfollowData = await request('/api/users/get/myfollowdata', 'GET', null, {\r\n            Authorization: `Bearer ${props.token}`\r\n        });\r\n\r\n        setFollowData(newfollowData);\r\n\r\n        imgParams(data.posts).then((data) => {\r\n            setMyPosts(data);\r\n        });\r\n\r\n        imgParams(props.user.profileImg).then(params => {\r\n            setProfileImgParams(params);\r\n        });\r\n    }, []);\r\n\r\n    const setPostData = async () => {\r\n        setIsChangesLoading(true);\r\n        const formData = new FormData();\r\n        formData.append('file', newPostImage);\r\n        formData.append('upload_preset', 'kalina-why-not');\r\n        formData.append('cloud_name', 'kalina-why-not');\r\n        await fetch('https://api.cloudinary.com/v1_1/kalina-why-not/image/upload', {\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n        .then(res => res.json())\r\n        .then(async formData => {\r\n            const newPost = await request('/api/posts/new/post', 'POST', {body, picture: formData.url}, {\r\n                Authorization: `Bearer ${props.token}`,\r\n            });\r\n\r\n            imgParams([newPost]).then((data) => {\r\n                setMyPosts([data[0], ...myPosts]);\r\n                setIsChangesLoading(false);\r\n                setIsCreatePostOpen(false);\r\n            });\r\n        })\r\n        .catch(err => {\r\n            setIsChangesLoading(false);\r\n            alert(err);\r\n        });\r\n    };\r\n\r\n    const changeProfileImage = async () => {\r\n        setIsChangesLoading(true);\r\n        const formData = new FormData();\r\n        if (!newProfileImage) {\r\n            alert('Error: please, choose an image');\r\n            setIsChangesLoading(false);\r\n            return;\r\n        }\r\n        formData.append('file', newProfileImage);\r\n        formData.append('upload_preset', 'kalina-why-not');\r\n        formData.append('cloud_name', 'kalina-why-not');\r\n        await fetch('https://api.cloudinary.com/v1_1/kalina-why-not/image/upload', {\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n        .then(res => res.json())\r\n        .then(async formData => {\r\n            const data = await request('/api/users/put/profileImg', 'PUT', {picture: formData.url}, {\r\n                Authorization: `Bearer ${props.token}`,\r\n            });\r\n            sessionStorage.setItem('storageName', JSON.stringify({\r\n                token: props.token, user: data\r\n            }));\r\n            const newData = JSON.parse(sessionStorage.getItem('storageName'));\r\n            if (newData && newData.token) {\r\n                props.login(newData.token, newData.user);\r\n            }\r\n            setIsChangesLoading(false);\r\n            setIsChangingProfileImage(false);\r\n        })\r\n        .catch(err => console.log(err));\r\n    };\r\n\r\n    const deletePost = async (postId) => {\r\n        setIsChangesLoading(true);\r\n        await request(`/api/posts/delete/post/${postId}`, 'DELETE', null, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        });\r\n        const data = await request('/api/posts/get/myposts', 'GET', null, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        });\r\n\r\n        imgParams(data.posts).then(data => setMyPosts(data));\r\n\r\n        setIsChangesLoading(false);\r\n        setIsPostDetailOpen(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {\r\n            !myPosts ? \r\n            <Spinner />\r\n            :\r\n            <div className='profile-page'>\r\n                <div className='profile__info'>\r\n                    <div className='avatar'>\r\n                        <img style={profileImgParams} src={props.user.profileImg} alt=''/>\r\n                    </div> \r\n                    <div className='info'>\r\n                        <div className='name-settings'>\r\n                            <h1>{props.user.displayName}</h1>\r\n                            <div>\r\n                                <i onClick={() => setIsChangingProfileImage(true)} className={\"material-icons\"}>settings</i>\r\n                                <i onClick={() => setIsCreatePostOpen(true)} className={\"material-icons\"}>add_to_photos</i>\r\n                            </div>\r\n                        </div> \r\n                        <div className='attributes'>\r\n                            <h3><strong>{myPosts.length}</strong> posts</h3>\r\n                            <h3><strong>{followData.followers.length}</strong> followers</h3>\r\n                            <h3><strong>{followData.following.length}</strong> following</h3>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='mobile-attributes'>\r\n                    <h3><strong>{myPosts.length}</strong> posts</h3>\r\n                    <h3><strong>{followData.followers.length}</strong> followers</h3>\r\n                    <h3><strong>{followData.following.length}</strong> following</h3>\r\n                </div>\r\n                <div className='profile__gallery'>\r\n                {myPosts.map(post => <div onClick={() => {setSelectedPost(post); setIsPostDetailOpen(true)}} key={post._id}><div><img src={post.picture} alt=\"\"  style={post.params}/></div></div>)}\r\n                </div>\r\n                \r\n                {isChangingProfileImage && <>\r\n                    <div onClick={() => setIsChangingProfileImage(false)} className='modal-window__close'></div>\r\n                    <div className='modal-window'>\r\n                        {isChangesLoading && <Spinner />}\r\n                        <i onClick={() => setIsChangingProfileImage(false)} className={\"material-icons close-btn\"}>clear</i>\r\n                        <div className='inner'>\r\n                            <h1>Account settings</h1>\r\n                            <div>\r\n                                <span>New profile image</span>\r\n                                <input type='file' accept=\"image/jpeg,image/png,image/bmp\" onChange={e => setNewProfileImage(e.target.files[0])} required/>\r\n                            </div>\r\n                            <button onClick={changeProfileImage}>Submit</button>\r\n                        </div>\r\n                    </div>\r\n                </>}\r\n                {isCreatePostOpen && <>\r\n                    <div onClick={() => setIsCreatePostOpen(false)} className='modal-window__close'></div>\r\n                    <div className='modal-window'>\r\n                        {isChangesLoading && <Spinner />}\r\n                        <i onClick={() => setIsCreatePostOpen(false)} className={\"material-icons close-btn\"}>clear</i>\r\n                        <div className='inner'>\r\n                            <h1>New Post</h1>\r\n                            <div>\r\n                                <span>Post image</span>\r\n                                <input type='file' accept=\"image/jpeg,image/png,image/bmp\" onChange={e => setNewPostImage(e.target.files[0])} required/>\r\n                                <span>Your comment</span>\r\n                                <input type='text' placeholder='Enter...' value={body} onChange={e => setBody(e.target.value)} required/>\r\n                            </div>\r\n                            <button onClick={setPostData}>Submit</button>\r\n                        </div>\r\n                    </div>\r\n                </>}\r\n                {(selectedPost && isPostDetailOpen) && \r\n                <>\r\n                    <div onClick={() => setIsPostDetailOpen(false)} className='modal-window__close'></div>\r\n                    <div className='modal-window'>\r\n                        {isChangesLoading && <Spinner />}\r\n                        <i onClick={() => deletePost(selectedPost._id)} className={\"material-icons delete-btn\"}>delete</i>\r\n                        <i onClick={() => setIsPostDetailOpen(false)} className={\"material-icons close-btn\"}>clear</i>\r\n                        <PostItem post={selectedPost} />\r\n                    </div>\r\n                </>}\r\n            </div>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        token: state.auth.token,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        login: (token, user) => {\r\n            dispatch(loginAC(token, user));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);","import { connect } from 'react-redux';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport PostItem from '../HomePage/PostItem';\r\nimport imgParams from '../../hooks/imgParams.hook';\r\nimport './Profile.scss';\r\nimport { setChatAC, setDialogsAC, setIsDialogSelectedAC, setMessagesAC } from '../../redux/dialogs-reducer';\r\n\r\nconst Profile = (props) => {\r\n    const history = useHistory();\r\n    const {error, request, clearError} = useHttp(); \r\n    const [userProfile, setUserProfile] = useState(null);\r\n    const [isFollowing, setIsFollowing] = useState(null);\r\n    const [profileImgParams, setProfileImgParams] = useState(null);\r\n    const {userId} = useParams();\r\n    const [isPostDetailOpen, setIsPostDetailOpen] = useState(false);\r\n    const [selectedPost, setSelectedPost] = useState(null);\r\n\r\n    useEffect(async () => {\r\n        const data = await request(`/api/users/get/user/${userId}`, 'GET', null, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        });\r\n\r\n        imgParams(data.posts).then(posts => {\r\n            setUserProfile({posts, user: data.user});\r\n            setIsFollowing(data.user.followers.includes(props.user._id));\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (userProfile) {\r\n            imgParams(userProfile.user.profileImg).then(params => {\r\n                setProfileImgParams(params);\r\n            });\r\n        }\r\n    }, [userProfile])\r\n\r\n    const followUser = async () => {\r\n        await request(`/api/users/put/follow`, 'PUT', {followId: userId}, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        }); \r\n        \r\n        setUserProfile(prev => {\r\n            prev.user.followers.push('');\r\n            return prev;\r\n        });\r\n\r\n        setIsFollowing(true);\r\n    }\r\n\r\n    const unfollowUser = async () => {\r\n        await request(`/api/users/put/unfollow`, 'PUT', {unfollowId: userId}, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        }); \r\n        \r\n        setUserProfile(prev => {\r\n            prev.user.followers.pop();\r\n            return prev;\r\n        });\r\n\r\n        setIsFollowing(false);\r\n    }\r\n\r\n    const sendMessage = async () => {\r\n        try {\r\n            let foundChat = null;\r\n            let extra = null; \r\n            const chatName = null;\r\n            const firstMsg = 'lalal';\r\n\r\n            const allChats = await request('/api/chats/get/conversations', 'GET', null, {\r\n                Authorization: `Bearer ${props.token}`,\r\n            });\r\n            \r\n            allChats.forEach(chat => {\r\n                chat.extra.forEach(item => {\r\n                    if (item.id === userId) {\r\n                        foundChat = chat.id;\r\n                    } \r\n                })\r\n            });\r\n\r\n            if (foundChat) {\r\n                await request(`/api/chats/new/message?id=${foundChat}`, 'POST', {\r\n                    message: firstMsg,\r\n                    timestamp: Date.now()\r\n                }, {Authorization: `Bearer ${props.token}`});\r\n            } else {\r\n                const data = await request('/api/chats/new/conversation', 'POST', {chatName, other: userId}, {Authorization: `Bearer ${props.token}`});\r\n\r\n                foundChat = data._id\r\n\r\n                await request(`/api/chats/new/message?id=${foundChat}`, 'POST', {\r\n                    message: firstMsg,\r\n                    timestamp: Date.now()\r\n                }, {Authorization: `Bearer ${props.token}`});\r\n            }\r\n\r\n            const chat = await request(`/api/chats/get/conversation?id=${foundChat}`, 'GET', null, {Authorization: `Bearer ${props.token}`});\r\n\r\n            props.setMessages(chat.conversation);\r\n\r\n            chat.extra.forEach(el => {\r\n                if (el.id !== props.user._id) {\r\n                    extra = {...el};\r\n                }\r\n            });\r\n\r\n            props.setChat({\r\n                chatName: extra.displayName || chat.chatName,\r\n                chatImg: extra.profileImg || chat.chatImg,\r\n                participantId: extra.id,\r\n                chatId: props.id\r\n            });\r\n\r\n            props.setIsDialogSelected(true);\r\n\r\n            history.push('/dialogs');\r\n        } catch(err) {console.log(err)}\r\n    }\r\n    \r\n    return(\r\n        <>\r\n        {\r\n            !userProfile ?\r\n            <Spinner />\r\n            :\r\n            <div className='profile-page'>\r\n                <div className='profile__info'>\r\n                    <div className='avatar'>\r\n                        <img style={profileImgParams} src={userProfile.user.profileImg} alt=''/>\r\n                    </div> \r\n                    <div className='info'>\r\n                        <div className='name-settings'>\r\n                            <h1>{userProfile.user.displayName}</h1>\r\n                            <div className='btn-wrapper'>\r\n                                {\r\n                                    isFollowing ? \r\n                                    <button onClick={unfollowUser}>Unfollow</button>\r\n                                    :\r\n                                    <button onClick={followUser}>Follow</button>\r\n                                }\r\n                                {/* <button onClick={sendMessage}>Send message</button> */}\r\n                                <div className='messages__footer'>\r\n                                    <input \r\n                                        // ref={inputMessage}\r\n                                        // value={newMessage} \r\n                                        // onChange={e => {setNewMessage(e.target.value); setIsOpenedEmoji(false);}} \r\n                                        // onKeyUp={e => (e.keyCode === 13 && newMessage) ? onSendMessageClick() : false} \r\n                                        type='text' \r\n                                        placeholder='Enter your message'/>\r\n                                    <button \r\n                                        // onClick={onSendMessageClick} \r\n                                        // disabled={!newMessage}\r\n                                    >\r\n                                            <i className={\"material-icons\"} style={{fontSize: '35px', cursor: 'pointer', width: '35px'}}>send</i></button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='attributes'>\r\n                            <h3><strong>{userProfile.posts.length}</strong> posts</h3>\r\n                            <h3><strong>{userProfile.user.followers.length}</strong> followers</h3>\r\n                            <h3><strong>{userProfile.user.following.length}</strong> following</h3>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='mobile-attributes'>\r\n                    <h3><strong>{userProfile.posts.length}</strong> posts</h3>\r\n                    <h3><strong>{userProfile.user.followers.length}</strong> followers</h3>\r\n                    <h3><strong>{userProfile.user.following.length}</strong> following</h3>\r\n                </div>\r\n                <div className='profile__gallery'>\r\n                {/* <i onClick={deletePost} className={\"material-icons\"} style={{fontSize: '30px', cursor: 'pointer', float: 'right'}}>delete</i> */}\r\n                {userProfile.posts.map(post => <div onClick={() => {setSelectedPost(post); setIsPostDetailOpen(true)}} key={post._id}><div><img src={post.picture} alt=\"\"  style={post.params}/></div></div>)}\r\n                </div>\r\n                {(selectedPost && isPostDetailOpen) && <>\r\n                    <div onClick={() => setIsPostDetailOpen(false)} className='modal-window__close'></div>\r\n                    <div className='modal-window'>\r\n                        <i onClick={() => setIsPostDetailOpen(false)} className={\"material-icons close-btn\"}>clear</i>\r\n                        <PostItem post={selectedPost} />\r\n                    </div>\r\n                </>}\r\n            </div>\r\n        }\r\n        </>        \r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        token: state.auth.token,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setDialogs: (dialogs) => {\r\n            dispatch(setDialogsAC(dialogs));\r\n        },\r\n        setMessages: (messages) => {\r\n            dispatch(setMessagesAC(messages));\r\n        },\r\n        setChat: chat => {\r\n            dispatch(setChatAC(chat))\r\n        },\r\n        setIsDialogSelected: (a) => {\r\n            dispatch(setIsDialogSelectedAC(a))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);","import { Avatar } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport './Users.scss';\r\n\r\nconst Users = (props) => {\r\n    const {error, request, clearError} = useHttp();\r\n    const [searchUsers, setSearchUsers] = useState('');\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [foundUsers, setFoundUsers] = useState([]);\r\n    const [allUsers, setAllUsers] = useState([]);\r\n\r\n    useEffect(async () => {\r\n        try{\r\n            setIsLoading(true);\r\n            const users = await request('/api/users/get/users', 'GET', null, {Authorization: `Bearer ${props.token}`});\r\n            setAllUsers(users);\r\n            setIsLoading(false);\r\n        } catch (err) {console.log(err)}\r\n    }, []);\r\n\r\n    useEffect(async () => {\r\n        if (searchUsers) {\r\n            try{\r\n                setIsLoading(true);\r\n                const users = await request('/api/users/post/users-search', 'POST', {query: searchUsers}, {Authorization: `Bearer ${props.token}`});\r\n                setFoundUsers(users);\r\n                setIsLoading(false);\r\n            } catch (err) {console.log(err)}\r\n        } else {\r\n            setFoundUsers([]);\r\n        }\r\n    }, [searchUsers]);\r\n\r\n    return (\r\n        <div className='users-page'>\r\n            <div className=\"search-user\">\r\n                <i className=\"material-icons\" style={{position: 'absolute', top: '50%', transform: 'translateY(-50%)'}}>search</i>\r\n                <input type=\"text\" placeholder=\"Search...\" className=\"search-input\" value={searchUsers} onChange={(e) => setSearchUsers(e.target.value)}/>\r\n                </div>\r\n                {\r\n                    foundUsers.length !== 0 ?\r\n                    <div className=\"dropdown-content\">\r\n                        {foundUsers.map(user => {\r\n                            return (\r\n                                <Link to={props.user._id !== user._id ? '/profile/' + user._id : '/profile'} \r\n                                    key={user._id} \r\n                                    onClick={() => setSearchUsers('')}>\r\n                                        <div>\r\n                                            <Avatar src={user.profileImg}/>\r\n                                            <p>{user.displayName}</p>\r\n                                        </div>\r\n                                </Link>\r\n                            )\r\n                        })}\r\n                    </div> \r\n                    :\r\n                    <div className=\"dropdown-content\">\r\n                        {allUsers.map(user => {\r\n                            return (\r\n                                <Link to={props.user._id !== user._id ? '/profile/' + user._id : '/profile'} \r\n                                    key={user._id} \r\n                                    onClick={() => setSearchUsers('')}>\r\n                                        <div>\r\n                                            <Avatar src={user.profileImg}/>\r\n                                            <p>{user.displayName}</p>\r\n                                        </div>\r\n                                </Link>\r\n                            )\r\n                        })}\r\n                    </div> \r\n                }\r\n                {isLoading && <Spinner />}\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        token: state.auth.token,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Users);","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Slider from '../../components/Slider/Slider';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport './HomePage.scss';\r\nimport PostItem from './PostItem';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\n\r\nconst HomePage = (props) => {\r\n    const [allPosts, setAllPosts] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const {error, request, clearError} = useHttp();\r\n\r\n    useEffect(async () => {\r\n        const data = await request('/api/posts/get/posts', 'GET', null, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        });\r\n        setAllPosts(data.posts)\r\n        setLoading(false)\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {loading ? \r\n                <Spinner/>\r\n                :\r\n                <div className='home-page'>\r\n                    {/* <div className='element'>\r\n                        <Slider imgWidth={1200} imgHeight={500}/>\r\n                    </div> */}\r\n                    <div className='home-page__inner'>\r\n                        {allPosts.map(post => <PostItem post={post} key={post._id}/>)}\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    token: state.auth.token\r\n});\r\n\r\nexport default connect(mapStateToProps)(HomePage);","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport { loginAC } from '../../redux/auth-reducer';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport './AuthPage.scss';\r\n\r\nconst AuthPage = (props) => {\r\n    const {login} = props;\r\n    const {error, request, clearError} = useHttp();\r\n    const [loading, setLoading] = useState(false);\r\n    const [form, setForm] = useState({\r\n        email: '',\r\n        displayName: '',\r\n        password: ''\r\n    });\r\n    const [isRegistrateForm, setIsRegistrateForm] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const data = JSON.parse(sessionStorage.getItem('storageName'));\r\n        \r\n        if (data && data.token) {\r\n            login(data.token, data.user);\r\n        }\r\n    }, [login])\r\n\r\n    const changeHandler = e => {\r\n        setForm({...form, [e.target.name]: e.target.value});\r\n    }\r\n\r\n    const registerHandler = async () => {\r\n        try {\r\n            setLoading(true);\r\n            await request('/api/auth/register', 'POST', {...form}, {Authorization: `Bearer ${props.token}`});\r\n            setLoading(false);\r\n            changeFormHandler();\r\n        } catch (err) {\r\n            alert(err);\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const loginHandler = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const data = await request('/api/auth/login', 'POST', {...form}, {Authorization: `Bearer ${props.token}`});\r\n            \r\n            login(data.token, data.user);\r\n        } catch (err) {\r\n            alert(err.message);\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const changeFormHandler = () => {\r\n        setIsRegistrateForm(!isRegistrateForm);\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            {loading ?\r\n                <Spinner />\r\n                :\r\n                <div className='split-screen'>\r\n                    <div className='left'>\r\n                        <section className='copy'>\r\n                            <h1>Kalina</h1>\r\n                            <p>Text for the beauty.</p>\r\n                        </section>\r\n                    </div>\r\n                    <div className='right'>\r\n                        <form>\r\n                            <section className='copy'>\r\n                                <h2>Sign {isRegistrateForm ? 'up' : 'in'}</h2>\r\n                                <div className='login-container'>\r\n                                    {isRegistrateForm ?\r\n                                        <p>Already have an account? <a onClick={changeFormHandler}><strong>Sign in!</strong></a></p>\r\n                                        :\r\n                                        <p>Don't have an account? <a onClick={changeFormHandler}><strong>Sign up!</strong></a></p>\r\n                                    }\r\n                                </div>\r\n                            </section>\r\n                            {isRegistrateForm && <div className='input-container name'>\r\n                                <label htmlFor='displayName'>Nickname</label>\r\n                                <input \r\n                                    name=\"displayName\"\r\n                                    id=\"displayName\" \r\n                                    type=\"text\"\r\n                                    value={form.displayName}\r\n                                    onChange={changeHandler}\r\n                                    required\r\n                                    placeholder='From 4 to 12 characters' \r\n                                    minLength=\"4\" \r\n                                    maxLength=\"12\"/>\r\n                            </div>}\r\n                            <div className='input-container email'>\r\n                                <label htmlFor='email'>Email</label>\r\n                                <input \r\n                                    name=\"email\"\r\n                                    id=\"email\" \r\n                                    type=\"email\" \r\n                                    value={form.email}\r\n                                    onChange={changeHandler}\r\n                                    required/>\r\n                            </div>\r\n                            <div className='input-container password'>\r\n                                <label htmlFor='password'>Password</label>\r\n                                <input \r\n                                    name=\"password\"\r\n                                    id=\"password\" \r\n                                    type=\"password\" \r\n                                    value={form.password}\r\n                                    onChange={changeHandler}\r\n                                    placeholder='At least 6 characters!' \r\n                                    required\r\n                                    minLength=\"6\" />\r\n                                <i className='far fa-eye-slash' />\r\n                            </div>\r\n                            {isRegistrateForm ?\r\n                                <button className='signup-btn' type='submit' onClick={registerHandler}>Sign up</button>\r\n                                :\r\n                                <button className='signup-btn' type='submit' onClick={loginHandler}>Sign in</button>\r\n                            }\r\n                            <section className='copy legal'>\r\n                                <p>\r\n                                    <span className='small'>\r\n                                        By continuing, you agree to accept our <br/><a>Privacy Policy</a> & <a>Terms of Service</a>.\r\n                                    </span>\r\n                                </p>\r\n                            </section>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        token: state.auth.token\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        login: (token, user) => {\r\n            dispatch(loginAC(token, user));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthPage);","import React, { createRef, forwardRef, useEffect, useRef } from 'react';\r\nimport './App.scss';\r\nimport {BrowserRouter as Router, HashRouter, Route} from \"react-router-dom\";\r\nimport Header from \"./components/Header/Header\";\r\nimport { connect } from 'react-redux';\r\nimport { useRoutes } from './routes';\r\n// import Spinner from './components/Spinner/spinner';\r\nimport { loginAC } from './redux/auth-reducer';\r\nimport AuthPage from './pages/AuthPage/AuthPage';\r\n\r\nconst App = (props) => {\r\n    const data = JSON.parse(sessionStorage.getItem('storageName'));\r\n    const app = useRef(null);\r\n\r\n    const isAuthenticated = !!props.token;\r\n    const routes = useRoutes();\r\n\r\n    if (data && data.token) {\r\n        props.login(data.token, data.user);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fixOffset()\r\n        \r\n        window.addEventListener('resize', fixOffset);\r\n\r\n        return () => window.removeEventListener('resize', fixOffset);\r\n    }, [isAuthenticated]);\r\n\r\n    function fixOffset() {\r\n        try{\r\n            app.current.style.height = document.body.clientHeight - (isAuthenticated ? 40 : 0) + 'px';\r\n        } catch {}    \r\n    }\r\n\r\n    return (\r\n        <Router>\r\n            {!isAuthenticated ? \r\n                <Route path=\"/\" exact component={AuthPage} />\r\n                :\r\n                <>\r\n                    <div className='main'>\r\n                        <Header />\r\n                        <div ref={app} className='app'> \r\n                            <div className='app-inner'>\r\n                                {routes}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            }\r\n        </Router>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    token: state.auth.token\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        login: (token, user) => {\r\n            dispatch(loginAC(token, user));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React from 'react';\r\nimport {Switch, Route} from 'react-router-dom';\r\nimport DialogsPage from './pages/DialogsPage/DialogsPage';\r\nimport ProfilePage from './pages/ProfilePage/Profile';\r\nimport UserProfile from './pages/ProfilePage/UserProfile';\r\nimport UsersPage from './pages/UsersPage/Users';\r\nimport HomePage from './pages/HomePage/HomePage';\r\n\r\nexport const useRoutes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path='/dialogs' component={DialogsPage}/>\r\n            <Route exact path='/profile' render={ () => <ProfilePage /> }/>\r\n            <Route exact path='/profile/:userId' render={ () => <UserProfile /> }/>\r\n            <Route exact path='/users' render={ () => <UsersPage /> }/>\r\n            <Route exact path=\"/\" component={HomePage}/>\r\n        </Switch>\r\n    )\r\n}\r\n","import store from \"./redux/store\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nlet vh = window.innerHeight * 0.01;\r\ndocument.documentElement.style.setProperty('--vh', `${vh}px`);\r\n\r\nwindow.addEventListener('resize', () => {\r\n  let vh = window.innerHeight * 0.01;\r\n  document.documentElement.style.setProperty('--vh', `${vh}px`);\r\n});\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById('root'));"],"sourceRoot":""}