{"version":3,"sources":["redux/dialogs-reducer.js","redux/auth-reducer.js","redux/store.js","hooks/http.hook.js","components/Header/Header.js","hooks/toLocalDate.hook.js","pages/DialogsPage/Dialogs/DialogItem.js","components/Spinner/Spinner.js","pages/DialogsPage/Dialogs/Dialogs.js","pages/DialogsPage/Messages/MessageItem.js","components/Spinner/SpinnerSmall.js","pages/DialogsPage/Messages/Messages.js","pages/DialogsPage/DialogsPage.js","pages/HomePage/PostItem.js","hooks/imgParams.hook.js","pages/ProfilePage/Profile.js","pages/ProfilePage/UserProfile.js","pages/UsersPage/Users.js","pages/HomePage/HomePage.js","pages/AuthPage/AuthPage.js","App.js","routes.js","index.js"],"names":["initialState","dialogs","messages","chat","isDialogSelected","isDialogsLoading","setMessagesAC","type","setDialogsAC","setChatAC","setIsDialogSelectedAC","setIsDialogsLoadingAC","dialogsReducer","state","action","newMessageBody","token","user","loginAC","jwtSecret","authReducer","sessionStorage","setItem","JSON","stringify","removeItem","reducers","combineReducers","dialogsPage","auth","store","createStore","useHttp","request","useCallback","url","a","method","body","headers","fetch","res","json","data","ok","Error","message","connect","dispatch","logout","props","history","useHistory","useState","searchUsers","setSearchUsers","foundUsers","setFoundUsers","document","onmouseup","e","searchUser","querySelector","path","includes","useEffect","query","Authorization","users","console","log","className","to","style","position","top","transform","placeholder","id","value","onChange","target","length","map","_id","onClick","Avatar","src","profileImg","displayName","preventDefault","push","toLocalDate","t","date","Date","temp","getTime","getTimezoneOffset","toISOString","split","time","replace","pusher","Pusher","cluster","setDialogs","setMessages","setChat","setIsDialogSelected","setIsDialogsLoading","dialog","index","dialogsLastMsg","setDialogsLastMsg","extra","setExtra","isLoading","setIsLoading","forEach","el","getLastMessage","channel","subscribe","bind","unbind_all","unsubscribe","selectedDialog","conversation","chatName","chatImg","participantId","chatId","name","owner","parseInt","timestamp","Spinner","searchChats","setSearchChats","useRef","dialogsHeader","dialogsItems","getDialogs","current","classList","remove","add","ref","paddingLeft","right","paddingRight","opacity","i","Message","userId","SpinnerSmall","sendMessage","newMessage","setNewMessage","isOpenedEmoji","setIsOpenedEmoji","isSendingNewMessage","setIsSendingNewMessage","chosenEmoji","setChosenEmoji","inputMessage","focus","emojiDiv","onSendMessageClick","now","fixScroll","block","scrollTop","scrollHeight","window","addEventListener","removeEventListener","prev","emoji","height","width","fontSize","left","IconButton","SearchOutlined","AttachFile","cursor","onKeyUp","keyCode","disabled","zIndex","disableAutoFocus","onEmojiClick","event","emojiObject","post","likes","isLiked","setIsLiked","isLoaded","setIsLoaded","likesCount","setLikesCount","comments","setComments","commentsCount","setCommentsCount","showAllComments","setShowAllComments","newComment","setNewComment","commentsField","createdAt","postId","newCommentHandler","text","toggle","picture","alt","color","item","bottom","imgParams","Promise","rej","solve","then","params","img","createElement","resolve","reject","onload","minWidth","minHeight","login","isCreatePostOpen","setIsCreatePostOpen","isPostDetailOpen","setIsPostDetailOpen","isChangingProfileImage","setIsChangingProfileImage","setBody","newPostImage","setNewPostImage","newProfileImage","setNewProfileImage","myPosts","setMyPosts","followData","setFollowData","profileImgParams","setProfileImgParams","isChangesLoading","setIsChangesLoading","selectedPost","setSelectedPost","newfollowData","posts","setPostData","formData","FormData","append","newPost","catch","err","alert","changeProfileImage","newData","parse","getItem","deletePost","followers","following","accept","files","required","userProfile","setUserProfile","isFollowing","setIsFollowing","useParams","isOpenedNewMessageField","setIsOpenedNewMessageField","input","followUser","followId","unfollowUser","unfollowId","pop","foundChat","other","allUsers","setAllUsers","allPosts","setAllPosts","loading","setLoading","email","password","form","setForm","isRegistrateForm","setIsRegistrateForm","changeHandler","registerHandler","changeFormHandler","loginHandler","htmlFor","minLength","maxLength","app","isAuthenticated","routes","component","DialogsPage","exact","render","UserProfile","HomePage","fixOffset","clientHeight","AuthPage","vh","innerHeight","documentElement","setProperty","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.20a4711a.chunk.js","sourcesContent":["let initialState = {\r\n    dialogs: [],\r\n    messages: [],\r\n    chat: {},\r\n    isDialogSelected: false,\r\n    isDialogsLoading: true\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'SEND_MESSAGE':\r\n            return {\r\n                ...state\r\n            }\r\n        case 'SET_MESSAGES':\r\n            return {\r\n                ...state,\r\n                newMessageBody: '',\r\n                messages: action.messages\r\n            };\r\n        case 'SET_DIALOGS':\r\n            return {\r\n                ...state,\r\n                dialogs: action.dialogs\r\n            };\r\n        case 'SET_CHAT':\r\n            return {\r\n                ...state,\r\n                chat: action.chat\r\n            };\r\n        case 'SET_IS_DIALOG_SELECTED':\r\n            return {\r\n                ...state,\r\n                isDialogSelected: action.isDialogSelected\r\n        };\r\n        case 'SET_IS_DIALOGS_LOADING':\r\n            return {\r\n                ...state,\r\n                isDialogsLoading: action.isDialogsLoading\r\n        };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = () => ({type: 'SEND_MESSAGE'});\r\nexport const setMessagesAC = (messages) => ({type: 'SET_MESSAGES', messages});\r\nexport const setDialogsAC = (dialogs) => ({type: 'SET_DIALOGS', dialogs});\r\nexport const setChatAC = (chat) => ({type: 'SET_CHAT', chat});\r\nexport const setIsDialogSelectedAC = (isDialogSelected) => ({type: 'SET_IS_DIALOG_SELECTED', isDialogSelected});\r\nexport const setIsDialogsLoadingAC = (isDialogsLoading) => ({type: 'SET_IS_DIALOGS_LOADING', isDialogsLoading});\r\n\r\nexport default dialogsReducer;","let initialState = {\r\n    token: null,\r\n    user: {}\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'LOGIN':\r\n            sessionStorage.setItem('storageName', JSON.stringify({\r\n                token: action.jwtSecret,\r\n                user: action.user\r\n            }));\r\n            \r\n            return {\r\n                ...state,\r\n                token: action.jwtSecret,\r\n                user: action.user\r\n            }\r\n        case 'LOGOUT':\r\n            sessionStorage.removeItem('storageName');\r\n\r\n            return {\r\n                ...state,\r\n                token: null,\r\n                user: {}\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const loginAC = (jwtSecret, user) => ({type: 'LOGIN', jwtSecret, user});\r\nexport const logoutAC = () => ({type: 'LOGOUT'});\r\nexport default authReducer;","import {combineReducers, createStore} from \"redux\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\n\r\nconst reducers = combineReducers({\r\n    dialogsPage: dialogsReducer,\r\n    auth: authReducer\r\n});\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store;","import {useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const request = useCallback( async (url, method = 'GET', body = null, headers = {}) => {\r\n        try {\r\n            if (body) {\r\n                body = JSON.stringify(body);\r\n                headers['Content-Type'] = 'application/json';\r\n            }\r\n\r\n            // const res = await fetch(`http://localhost:5000${url}`, {method, body, headers});\r\n            const res = await fetch(`https://kalinaserver.herokuapp.com${url}`, {method, body, headers});\r\n            const data = await res.json();\r\n\r\n            if (!res.ok) {\r\n                throw new Error(data.message || 'Something goes wrong');\r\n            }\r\n\r\n            return data;\r\n        } catch (e) {\r\n            throw e;\r\n        }\r\n    }, []);\r\n    \r\n    return {request};\r\n} ","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport { logoutAC } from '../../redux/auth-reducer';\r\nimport { Avatar } from '@material-ui/core';\r\nimport './Header.scss';\r\n\r\nconst Header = (props) => {\r\n    const {logout} = props;\r\n    const history = useHistory();\r\n    const {request} = useHttp();\r\n    const [searchUsers, setSearchUsers] = useState('');\r\n    const [foundUsers, setFoundUsers] = useState([]);\r\n\r\n    const logoutHandler = (e) => {\r\n        e.preventDefault();\r\n        logout(); \r\n        history.push('/');\r\n    };\r\n\r\n    document.onmouseup = (e) => {\r\n        const searchUser = document.querySelector('.search-user');\r\n        if (!e.path.includes(searchUser)) {\r\n            setFoundUsers([]);\r\n            setSearchUsers('');\r\n        }\r\n    }\r\n    \r\n    useEffect(async () => {\r\n        if (searchUsers) {\r\n            try{\r\n                const users = await request('/api/users/post/users-search', 'POST', {query: searchUsers}, {Authorization: `Bearer ${props.token}`});\r\n                setFoundUsers(users);\r\n            } catch (err) {console.log(err)}\r\n        } else {\r\n            setFoundUsers([]);\r\n        }\r\n    }, [searchUsers]);\r\n\r\n    return (\r\n        <div className='header-wrapper'>\r\n            <div className='header'>\r\n                <span className=\"label\"><Link to=\"/\"><big>Kalina</big></Link></span>\r\n                <div className=\"search-user\">\r\n                    <i className=\"material-icons\" style={{position: 'absolute', top: '50%', transform: 'translateY(-50%)'}}>search</i>\r\n                    <input type=\"text\" placeholder=\"Search users...\" id=\"search-input\" value={searchUsers} onChange={(e) => setSearchUsers(e.target.value)}/>\r\n                    {\r\n                        foundUsers.length !== 0 &&\r\n                        <div className=\"dropdown-content\">\r\n                            {foundUsers.map(user => <Link to={props.user._id !== user._id ? '/profile/' + user._id : '/profile'}  key={user._id} onClick={() => setSearchUsers('')}><div><Avatar src={user.profileImg}/><p>{user.displayName}</p></div></Link>)}\r\n                        </div> \r\n                    }\r\n                </div>\r\n                <div className=\"navigation\">\r\n                    <Link to=\"/\"><i className=\"material-icons\">home</i></Link>\r\n                    <Link to=\"/profile\"><i className=\"material-icons\">person</i></Link>\r\n                    <Link to=\"/dialogs\"><i className=\"material-icons\">message</i></Link>\r\n                    <Link to=\"/users\"><i className=\"material-icons\">people</i></Link>\r\n                    <Link to=\"/\" onClick={logoutHandler}><i className=\"material-icons\">exit_to_app</i></Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        token: state.auth.token,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        logout: () => {\r\n            dispatch(logoutAC());\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","const toLocalDate = (t) => {\r\n    const date = new Date(t);\r\n    const dateWithOffset = new Date(date.getTime() - (date.getTimezoneOffset() * 60000)).toISOString();\r\n    const temp = dateWithOffset.split('T');\r\n    return {date: temp[0], time: temp[1].replace(/:\\d+\\..*$/g, '')}\r\n};\r\n\r\nexport default toLocalDate;\r\n\r\n// temp[0].replace(/^\\d+-/g, '')","import React, { useEffect, useState } from 'react';\r\nimport './DialogItem.scss';\r\nimport { Avatar } from '@material-ui/core';\r\nimport Pusher from 'pusher-js';\r\nimport { setChatAC, setDialogsAC, setIsDialogSelectedAC, setIsDialogsLoadingAC, setMessagesAC } from \"../../../redux/dialogs-reducer\";\r\nimport { connect } from 'react-redux';\r\nimport { useHttp } from '../../../hooks/http.hook';\r\nimport toLocalDate from '../../../hooks/toLocalDate.hook';\r\n\r\nconst pusher = new Pusher('b634efb073fba40fbf3a', {\r\n    cluster: 'eu'\r\n});\r\n\r\nconst DialogItem = (props) => {\r\n    const {dialog, index} = props;\r\n    const {request} = useHttp();\r\n    const [dialogsLastMsg, setDialogsLastMsg] = useState({});\r\n    const [extra, setExtra] = useState({});\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        props.extra.forEach(el => {\r\n            if (el.id !== props.user._id) {\r\n                setExtra(el);\r\n            }\r\n        });\r\n        \r\n        return () =>  props.setIsDialogSelected(false);\r\n    }, []);\r\n    \r\n    const getLastMessage = async () => {\r\n        try {\r\n            const data = await request(`/api/chats/get/lastMessage?id=${dialog.id}`, 'GET', null, {Authorization: `Bearer ${props.token}`});\r\n            setDialogsLastMsg(data);\r\n            setIsLoading(false);\r\n\r\n            if (index) props.setIsDialogsLoading(false);\r\n        } catch(err) {console.log(err)}\r\n    }\r\n\r\n    useEffect(() => {\r\n        getLastMessage();\r\n        \r\n        const channel = pusher.subscribe('messages');\r\n        channel.bind('newMessage', () => {\r\n            getLastMessage();   \r\n        });\r\n\r\n        return () => {\r\n            channel.unbind_all();\r\n            channel.unsubscribe();\r\n        };\r\n    }, [dialog.id]);\r\n\r\n    const selectedDialog = async () => {\r\n        try {\r\n            const data = await request(`/api/chats/get/conversation?id=${dialog.id}`, 'GET', null, {Authorization: `Bearer ${props.token}`});\r\n            props.setMessages(data.conversation);\r\n            props.setChat({\r\n                chatName: extra.displayName || data.chatName,\r\n                chatImg: extra.profileImg || data.chatImg,\r\n                participantId: extra.id,\r\n                chatId: dialog.id\r\n            });\r\n            props.setIsDialogSelected(true);\r\n        } catch(err) {console.log(err)}\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {\r\n            !isLoading &&\r\n            <div onClick={selectedDialog} className='dialogItem'>\r\n                <div className='dialogItem__info'>\r\n                    <div className='dialogItem__info-avatar'><Avatar src={extra.profileImg}/></div>\r\n                    <div className='dialogItem__info-main'>\r\n                        <div><h1>{dialog.name || extra.displayName}</h1></div>\r\n                        <span className='dialogItem__info-message'>{dialogsLastMsg.owner.displayName}: {dialogsLastMsg.message}</span>\r\n                    </div>\r\n                    <div className=\"timeStamp\">\r\n                        <div>{toLocalDate(parseInt(dialogsLastMsg.timestamp)).date}</div>\r\n                        <div>{toLocalDate(parseInt(dialogsLastMsg.timestamp)).time}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        isDialogsLoading: state.dialogsPage.isDialogsLoading,\r\n        token: state.auth.token,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setDialogs: (dialogs) => {\r\n            dispatch(setDialogsAC(dialogs));\r\n        },\r\n        setMessages: (messages) => {\r\n            dispatch(setMessagesAC(messages));\r\n        },\r\n        setChat: chat => {\r\n            dispatch(setChatAC(chat))\r\n        },\r\n        setIsDialogSelected: (a) => {\r\n            dispatch(setIsDialogSelectedAC(a))\r\n        },\r\n        setIsDialogsLoading: (a) => {\r\n            dispatch(setIsDialogsLoadingAC(a))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DialogItem);","import React from 'react';\r\nimport './Spinner.scss';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Spinner;","import React, { useEffect, useRef } from 'react';\r\nimport DialogItem from './DialogItem';\r\nimport Pusher from 'pusher-js';\r\nimport { useHttp } from '../../../hooks/http.hook';\r\nimport { setDialogsAC, setIsDialogsLoadingAC } from '../../../redux/dialogs-reducer';\r\nimport { connect } from 'react-redux';\r\nimport { useState } from 'react';\r\nimport Spinner from '../../../components/Spinner/Spinner';\r\nimport \"./Dialogs.scss\";\r\n\r\nconst pusher = new Pusher('b634efb073fba40fbf3a', {\r\n    cluster: 'eu'\r\n});\r\n\r\nconst Dialogs = (props) => {    \r\n    const {request} = useHttp();\r\n    const [searchChats, setSearchChats] = useState('');\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const dialogs = useRef(null);\r\n    const dialogsHeader = useRef(null);\r\n    const dialogsItems = useRef(null);\r\n\r\n    const getDialogs = async () => {\r\n        try {\r\n            const data = await request('/api/chats/get/conversations', 'GET', null, {\r\n                Authorization: `Bearer ${props.token}`,\r\n            });\r\n            props.setDialogs(data);\r\n            setIsLoading(false);\r\n        } catch(err) {console.log(err)}\r\n    }\r\n    \r\n    useEffect(() => {\r\n        !props.isDialogSelected ? dialogs.current.classList.add('show') : dialogs.current.classList.remove('show');\r\n    }, [props.isDialogSelected])\r\n    \r\n    useEffect(() => {\r\n        getDialogs();\r\n        \r\n        const channel = pusher.subscribe('chats');\r\n        channel.bind('newChat', () => {\r\n            getDialogs();\r\n        });\r\n\r\n        return () => {\r\n            channel.unbind_all();\r\n            channel.unsubscribe();\r\n            props.setIsDialogsLoading(true);\r\n        };\r\n    }, []);\r\n    \r\n    return (\r\n            <div ref={dialogs} className={'dialogs show'}>\r\n                <div ref={dialogsHeader} className='dialogs__header'>\r\n                    <div className=\"search-chats\">\r\n                        <i className=\"material-icons\" style={{position: 'absolute', top: '50%', transform: 'translateY(-50%)', paddingLeft: '5px'}}>search</i>\r\n                        <input type=\"text\" placeholder=\"Search the chat or start new\" id=\"search-chats-input\" value={searchChats} onChange={(e) => setSearchChats(e.target.value)}/>\r\n                        <i className=\"material-icons\" style={{position: 'absolute', top: '50%', right: '0', transform: 'translateY(-50%)', paddingRight: '5px', opacity: '.5'}}>add</i>\r\n                    </div>\r\n                </div>\r\n                <div ref={dialogsItems} className='dialogs__items'>\r\n                {\r\n                    props.isDialogsLoading && <Spinner />\r\n                }\r\n                {\r\n                    !isLoading &&\r\n                    props.dialogs.map((dialog, i) => {\r\n                        let index = null;\r\n                        if (i+1 === props.dialogs.length) index = i;\r\n                        return (\r\n                            <DialogItem index={index} dialog={dialog} key={dialog.id} extra={dialog.extra}/> \r\n                        )\r\n                    })\r\n                }\r\n                </div>\r\n            </div>\r\n    )  \r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        isDialogSelected: state.dialogsPage.isDialogSelected,\r\n        isDialogsLoading: state.dialogsPage.isDialogsLoading,\r\n        user: state.auth.user,\r\n        token: state.auth.token\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setDialogs: (dialogs) => {\r\n            dispatch(setDialogsAC(dialogs));\r\n        },\r\n        setIsDialogsLoading: (a) => {\r\n            dispatch(setIsDialogsLoadingAC(a))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dialogs);","import React from 'react';\r\nimport toLocalDate from '../../../hooks/toLocalDate.hook';\r\nimport './MessageItem.scss';\r\n\r\nconst Message = (props) => {\r\n    const timestamp = toLocalDate(parseInt(props.message.timestamp));\r\n    \r\n    return (\r\n        <div className={`messages__item  ${props.message.owner._id === props.userId && 'messages__receiver'}`}>\r\n            <span className='message__name'>{props.message.owner.displayName}</span>\r\n            <div className='message'>{props.message.message}</div>\r\n            <span className='message__timestamp'>{timestamp.date + ' ' + timestamp.time}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport './SpinnerSmall.scss';\r\n\r\nconst SpinnerSmall = () => {\r\n    return (\r\n        <div className=\"loadingio-spinner-spinner-owwc8nyxhkf\">\r\n            <div className=\"ldio-wt50jy4ikwl\">\r\n                <div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SpinnerSmall;","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport { AttachFile, SearchOutlined } from '@material-ui/icons';\r\nimport Pusher from 'pusher-js';\r\nimport MessageItem from './MessageItem';\r\nimport { useHttp } from '../../../hooks/http.hook';\r\nimport Picker from 'emoji-picker-react';\r\nimport { Link } from 'react-router-dom';\r\nimport SpinnerSmall from '../../../components/Spinner/SpinnerSmall';\r\nimport {sendMessageCreator, setChatAC, setIsDialogSelectedAC, setMessagesAC} from \"../../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport './Messages.scss';\r\n\r\nconst Messages = (props) => {\r\n    const {request} = useHttp();\r\n    const [newMessage, setNewMessage] = useState('');\r\n    const [isOpenedEmoji, setIsOpenedEmoji] = useState(false);\r\n    const [isSendingNewMessage, setIsSendingNewMessage] = useState(false);\r\n    const [chosenEmoji, setChosenEmoji] = useState(null);\r\n    const inputMessage = useRef(null);\r\n\r\n    const onEmojiClick = (event, emojiObject) => {\r\n        setChosenEmoji(emojiObject);\r\n    };\r\n    \r\n    useEffect(() => {\r\n        document.onmouseup = (e) => {\r\n            inputMessage.current.focus();\r\n            const emojiDiv = document.querySelector('.emojiDiv');\r\n            if (!e.path.includes(emojiDiv)) {\r\n                setIsOpenedEmoji(false);\r\n            }\r\n        }\r\n        \r\n        return () => document.onmouseup = null;\r\n    }, [isOpenedEmoji]);\r\n    \r\n    const onSendMessageClick = async () => {\r\n        setNewMessage('');\r\n        setIsOpenedEmoji(false);\r\n        setIsSendingNewMessage(true);\r\n        try {\r\n            await request(`/api/chats/new/message?id=${props.chat.chatId}`, 'POST', {\r\n                message: newMessage,\r\n                timestamp: Date.now()\r\n            }, {Authorization: `Bearer ${props.token}`});\r\n        } catch(err) {console.log(err)}\r\n    }\r\n\r\n    const fixScroll = () => {\r\n        try {\r\n            const block = document.querySelector('.messages__body');\r\n            block.scrollTop = block.scrollHeight;\r\n        } catch{}\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', () => fixScroll());\r\n        inputMessage.current.focus();\r\n        \r\n        return () => window.removeEventListener('resize', () => fixScroll());\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const pusher = new Pusher('b634efb073fba40fbf3a', {\r\n            cluster: 'eu'\r\n        });\r\n      \r\n        const channel = pusher.subscribe('messages');\r\n        channel.bind('newMessage', async () => {\r\n            try {\r\n                const data = await request(`/api/chats/get/conversation?id=${props.chat.chatId}`, 'GET', null, {Authorization: `Bearer ${props.token}`});\r\n                props.setMessages(data.conversation);\r\n                fixScroll();\r\n                setIsSendingNewMessage(false);\r\n            } catch {}\r\n        });\r\n\r\n        fixScroll();\r\n\r\n        return () => {\r\n            channel.unbind_all();\r\n            channel.unsubscribe();\r\n        };\r\n    }, [props.chat.chatId]);\r\n\r\n    useEffect(() => {\r\n        if (chosenEmoji)\r\n        setNewMessage(prev => prev + chosenEmoji.emoji);\r\n    }, [chosenEmoji]);\r\n\r\n    return (\r\n        <div className='messages'>\r\n            <div className='messages__header'>\r\n                <div className=\"btnBack\" style={{height: '50px', width: '30px'}}>\r\n                    <i onClick={() => props.setIsDialogSelected(false)} className=\"material-icons\" style={{fontSize: '50px', position: 'absolute', left: '-5px'}}>chevron_left</i>\r\n                </div>\r\n                <div className='messages__headerInfo'>\r\n                    <Link  to={'/profile/' + props.chat.participantId}>\r\n                        <Avatar src={props.chat.chatImg}/>\r\n                        <div><p>{props.chat.chatName}</p></div>\r\n                    </Link>\r\n                </div>\r\n                <div className='messages__headerRight'>\r\n                    <IconButton>\r\n                        <SearchOutlined/>\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <AttachFile/>\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n            <div className='messages__body'>\r\n                { props.messages.map( message => <MessageItem userId={props.user._id} message={message} key={message._id} /> ) }\r\n            </div>\r\n            <div className='messages__footer'>\r\n                <i onClick={() => setIsOpenedEmoji(!isOpenedEmoji)} \r\n                    className={\"material-icons emojicon\"} \r\n                    style={{fontSize: '35px', cursor: 'pointer', width: '35px'}} >insert_emoticon</i>\r\n                <input \r\n                    ref={inputMessage}\r\n                    value={newMessage} \r\n                    onChange={e => {setNewMessage(e.target.value); setIsOpenedEmoji(false);}} \r\n                    onKeyUp={e => (e.keyCode === 13 && newMessage) ? onSendMessageClick() : false} \r\n                    type='text' \r\n                    placeholder='Enter your message'/>\r\n                <button onClick={onSendMessageClick} disabled={!newMessage}>\r\n                    <i className={\"material-icons\"} style={{fontSize: '35px', cursor: 'pointer', width: '35px'}}>send</i>\r\n                    {isSendingNewMessage && <SpinnerSmall />}\r\n                </button>\r\n            </div>\r\n            {isOpenedEmoji && \r\n            <div className='emojiDiv' style={{position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', zIndex: '1000'}}>\r\n                <Picker disableAutoFocus={true} onEmojiClick={onEmojiClick} />\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.dialogsPage.messages,\r\n        chat: state.dialogsPage.chat,\r\n        user: state.auth.user,\r\n        token: state.auth.token\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: () => {\r\n            dispatch(sendMessageCreator());\r\n        },\r\n        setMessages: (messages) => {\r\n            dispatch(setMessagesAC(messages));\r\n        },\r\n        setChat: chat => {\r\n            dispatch(setChatAC(chat))\r\n        },\r\n        setIsDialogSelected: (a) => {\r\n            dispatch(setIsDialogSelectedAC(a))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Messages);","import React from 'react';\r\nimport './DialogsPage.scss';\r\nimport Dialogs from './Dialogs/Dialogs';\r\nimport Messages from './Messages/Messages';\r\nimport { connect } from 'react-redux';\r\n \r\nconst DialogsPage = (props) => {\r\n    return (\r\n        <div className='dialogs-page'>\r\n            <Dialogs />\r\n            {!props.isDialogSelected ? \r\n                <div className='chooseChat'>Choose a chat</div> \r\n                : \r\n                <Messages />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isDialogSelected: state.dialogsPage.isDialogSelected\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DialogsPage);","import { connect } from 'react-redux';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { useState } from 'react';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport { Link } from 'react-router-dom';\r\nimport { Avatar } from '@material-ui/core';\r\nimport Picker from 'emoji-picker-react';\r\nimport toLocalDate from '../../hooks/toLocalDate.hook';\r\n\r\nconst PostItem = ({post, token, user}) => {\r\n    const {request} = useHttp();\r\n    const [isLiked, setIsLiked] = useState(post.likes.includes(user._id));\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [likesCount, setLikesCount] = useState(post.likes.length);\r\n    const [comments, setComments] = useState(post.comments);\r\n    const [commentsCount, setCommentsCount] = useState(post.comments.length);\r\n    const [showAllComments, setShowAllComments] = useState(false);\r\n    const [newComment, setNewComment] = useState('');\r\n    const commentsField = useRef(null);\r\n    const [chosenEmoji, setChosenEmoji] = useState(null);\r\n    const [isOpenedEmoji, setIsOpenedEmoji] = useState(false);\r\n    const timestamp = toLocalDate(post.createdAt);\r\n\r\n    const onEmojiClick = (event, emojiObject) => setChosenEmoji(emojiObject);\r\n    \r\n    useEffect(() => {\r\n        document.onmouseup = (e) => {\r\n            const emojiDiv = document.querySelector('.emojiDiv');\r\n            if (!e.path.includes(emojiDiv)) {\r\n                setIsOpenedEmoji(false);\r\n            }\r\n        }\r\n\r\n        return () => document.onmouseup = null;\r\n    }, [isOpenedEmoji]);\r\n\r\n    useEffect(async () => {\r\n        if (isLoaded) {\r\n            const data = await request(`/api/posts/put/${isLiked ? 'like' : 'unlike'}`, 'PUT', {postId: post._id}, {Authorization: `Bearer ${token}`});\r\n            setLikesCount(data.likes.length);\r\n        }\r\n    }, [isLiked]);\r\n\r\n    const likeHandler = () => {\r\n        setIsLoaded(true);\r\n        setIsLiked(!isLiked);\r\n    }\r\n    \r\n    const newCommentHandler = async () => {\r\n        const data = await request(`/api/posts/put/comment`, 'PUT', {postId: post._id, text: newComment}, {Authorization: `Bearer ${token}`});\r\n        setComments(data.comments);\r\n        setNewComment('');\r\n        setCommentsCount(data.comments.length);\r\n        setIsOpenedEmoji(false);\r\n    }\r\n    \r\n    useEffect(() => {\r\n        commentsField.current.classList.toggle('show-comments');\r\n    }, [showAllComments]);\r\n\r\n    useEffect(() => {\r\n        if (chosenEmoji) setNewComment(prev => prev + chosenEmoji.emoji);\r\n    }, [chosenEmoji]);\r\n\r\n    return (\r\n        <div className='element'>\r\n            <div className='card'>\r\n                <div className='card-header'>\r\n                    <Link to={user._id !== post.owner._id ? '/profile/' + post.owner._id : '/profile'}><Avatar src={post.owner.profileImg}/><p>{post.owner.displayName}</p></Link>\r\n                </div>\r\n                <div className='card-image'>\r\n                    <img src={post.picture} alt=\"\"/>\r\n                </div>\r\n                <div className='card-content'>\r\n                    <i onClick={likeHandler} className={\"material-icons\"} style={{fontSize: '35px', cursor: 'pointer', color: 'red'}} >{isLiked ? 'favorite' : 'favorite_border'}</i>\r\n                    <small><strong>Likes: {likesCount}</strong></small>\r\n                    <p><strong>{post.owner.displayName}</strong> {post.body}</p>\r\n                    <div><strong className='show-comments-btn' onClick={() => setShowAllComments(!showAllComments)}>{!showAllComments ? 'Show' : 'Hide'} all comments ({commentsCount})</strong></div>\r\n                    <div className={'comments show-comments'} ref={commentsField}>\r\n                        {comments.map(item => <div key={item._id}><strong>{item.owner.displayName}</strong> {item.text}</div>)}\r\n                    </div>\r\n                    <div className='timestamp'>{timestamp.date + ' ' + timestamp.time}</div>\r\n                </div>\r\n                <div className='new-comment'>\r\n                    {isOpenedEmoji && \r\n                        <div className='emojiDiv' style={{position: 'absolute', bottom: '20px', left: '50%', transform: 'translate(-50%, -32px)', zIndex: '1000'}}>\r\n                            <Picker disableAutoFocus={true} onEmojiClick={onEmojiClick} />\r\n                        </div>\r\n                    }\r\n                    <i onClick={() => setIsOpenedEmoji(!isOpenedEmoji)} className={\"material-icons emojicon\"} style={{fontSize: '35px', cursor: 'pointer', width: '35px'}} >insert_emoticon</i>\r\n                    <input value={newComment} onChange={e => {setNewComment(e.target.value); setIsOpenedEmoji(false);}} onKeyUp={e => (e.keyCode === 13 && newComment) ? newCommentHandler() : false} type='text' placeholder='Add a comment...'/>\r\n                    <button onClick={newCommentHandler} disabled={!newComment}>Publish</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    token: state.auth.token,\r\n    user: state.auth.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(PostItem);","function imgParams(data) {\r\n    return new Promise((res, rej) => {\r\n        if (typeof(data) === 'string') {\r\n            solve(data).then(params => res(params));\r\n        } else {\r\n            if (data.length === 0) res(data);\r\n            \r\n            for (let i = 0; i < data.length; ++i){\r\n                solve(data[i].picture).then((params) => {\r\n                    data[i].params = params;\r\n                    \r\n                    if (i+1 === data.length) res(data);\r\n                });\r\n            }\r\n        }\r\n\r\n        function solve(src) {\r\n            let img = document.createElement('img');\r\n            img.src = src;\r\n            return new Promise((resolve, reject) => {\r\n                img.onload = () => { \r\n                    resolve(\r\n                        img.width >= img.height ? \r\n                        {height: '100%', minWidth: '100%', width: 'none', minHeight: 'none'} \r\n                        : \r\n                        {height: 'none', minWidth: 'none', width: '100%', minHeight: '100%'}\r\n                    );\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport default imgParams;","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport { loginAC } from '../../redux/auth-reducer';\r\nimport PostItem from '../HomePage/PostItem';\r\nimport imgParams from '../../hooks/imgParams.hook';\r\nimport './Profile.scss';\r\n\r\n\r\nconst Profile = (props) => {\r\n    const {request} = useHttp();\r\n    const [isCreatePostOpen, setIsCreatePostOpen] = useState(false);\r\n    const [isPostDetailOpen, setIsPostDetailOpen] = useState(false);\r\n    const [isChangingProfileImage, setIsChangingProfileImage] = useState(false);\r\n    const [body, setBody] = useState('');\r\n    const [newPostImage, setNewPostImage] = useState('');\r\n    const [newProfileImage, setNewProfileImage] = useState('');\r\n    const [myPosts, setMyPosts] = useState(null);\r\n    const [followData, setFollowData] = useState(null);\r\n    const [profileImgParams, setProfileImgParams] = useState(null);\r\n    const [isChangesLoading, setIsChangesLoading] = useState(false);\r\n    const [selectedPost, setSelectedPost] = useState(null);\r\n    \r\n    useEffect(async () => {\r\n        const data = await request('/api/posts/get/myposts', 'GET', null, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        });\r\n        \r\n        const newfollowData = await request('/api/users/get/myfollowdata', 'GET', null, {\r\n            Authorization: `Bearer ${props.token}`\r\n        });\r\n        console.log(newfollowData)\r\n        setFollowData(newfollowData);\r\n\r\n        imgParams(data.posts).then((data) => {\r\n            setMyPosts(data);\r\n        });\r\n\r\n        imgParams(props.user.profileImg).then(params => {\r\n            setProfileImgParams(params);\r\n        });\r\n    }, []);\r\n\r\n    const setPostData = async () => {\r\n        setIsChangesLoading(true);\r\n        const formData = new FormData();\r\n        formData.append('file', newPostImage);\r\n        formData.append('upload_preset', 'kalina-why-not');\r\n        formData.append('cloud_name', 'kalina-why-not');\r\n        await fetch('https://api.cloudinary.com/v1_1/kalina-why-not/image/upload', {\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n        .then(res => res.json())\r\n        .then(async formData => {\r\n            const newPost = await request('/api/posts/new/post', 'POST', {body, picture: formData.url}, {\r\n                Authorization: `Bearer ${props.token}`,\r\n            });\r\n\r\n            imgParams([newPost]).then((data) => {\r\n                setMyPosts([data[0], ...myPosts]);\r\n                setIsChangesLoading(false);\r\n                setIsCreatePostOpen(false);\r\n            });\r\n        })\r\n        .catch(err => {\r\n            setIsChangesLoading(false);\r\n            alert(err);\r\n        });\r\n    };\r\n\r\n    const changeProfileImage = async () => {\r\n        setIsChangesLoading(true);\r\n        const formData = new FormData();\r\n        if (!newProfileImage) {\r\n            alert('Error: please, choose an image');\r\n            setIsChangesLoading(false);\r\n            return;\r\n        }\r\n        formData.append('file', newProfileImage);\r\n        formData.append('upload_preset', 'kalina-why-not');\r\n        formData.append('cloud_name', 'kalina-why-not');\r\n        await fetch('https://api.cloudinary.com/v1_1/kalina-why-not/image/upload', {\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n        .then(res => res.json())\r\n        .then(async formData => {\r\n            const data = await request('/api/users/put/profileImg', 'PUT', {picture: formData.url}, {\r\n                Authorization: `Bearer ${props.token}`,\r\n            });\r\n            sessionStorage.setItem('storageName', JSON.stringify({\r\n                token: props.token, user: data\r\n            }));\r\n            const newData = JSON.parse(sessionStorage.getItem('storageName'));\r\n            if (newData && newData.token) {\r\n                props.login(newData.token, newData.user);\r\n            }\r\n            setIsChangesLoading(false);\r\n            setIsChangingProfileImage(false);\r\n        })\r\n        .catch(err => console.log(err));\r\n    };\r\n\r\n    const deletePost = async (postId) => {\r\n        setIsChangesLoading(true);\r\n        await request(`/api/posts/delete/post/${postId}`, 'DELETE', null, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        });\r\n        const data = await request('/api/posts/get/myposts', 'GET', null, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        });\r\n\r\n        imgParams(data.posts).then(data => setMyPosts(data));\r\n\r\n        setIsChangesLoading(false);\r\n        setIsPostDetailOpen(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {\r\n            !myPosts ? \r\n            <Spinner />\r\n            :\r\n            <div className='profile-page'>\r\n                <div className='profile__info'>\r\n                    <div className='avatar'>\r\n                        <img style={profileImgParams} src={props.user.profileImg} alt=''/>\r\n                    </div> \r\n                    <div className='info'>\r\n                        <div className='name-settings'>\r\n                            <h1>{props.user.displayName}</h1>\r\n                            <div>\r\n                                <i onClick={() => setIsChangingProfileImage(true)} className={\"material-icons\"}>settings</i>\r\n                                <i onClick={() => setIsCreatePostOpen(true)} className={\"material-icons\"}>add_to_photos</i>\r\n                            </div>\r\n                        </div> \r\n                        <div className='attributes'>\r\n                            <h3><strong>{myPosts.length}</strong> posts</h3>\r\n                            <h3><strong>{followData.followers.length}</strong> followers</h3>\r\n                            <h3><strong>{followData.following.length}</strong> following</h3>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='mobile-attributes'>\r\n                    <h3><strong>{myPosts.length}</strong> posts</h3>\r\n                    <h3><strong>{followData.followers.length}</strong> followers</h3>\r\n                    <h3><strong>{followData.following.length}</strong> following</h3>\r\n                </div>\r\n                <div className='profile__gallery'>\r\n                {myPosts.map(post => <div onClick={() => {setSelectedPost(post); setIsPostDetailOpen(true)}} key={post._id}><div><img src={post.picture} alt=\"\"  style={post.params}/></div></div>)}\r\n                </div>\r\n                \r\n                {isChangingProfileImage && <>\r\n                    <div onClick={() => setIsChangingProfileImage(false)} className='modal-window__close'></div>\r\n                    <div className='modal-window'>\r\n                        {isChangesLoading && <Spinner />}\r\n                        <i onClick={() => setIsChangingProfileImage(false)} className={\"material-icons close-btn\"}>clear</i>\r\n                        <div className='inner'>\r\n                            <h1>Account settings</h1>\r\n                            <div>\r\n                                <span>New profile image</span>\r\n                                <input type='file' accept=\"image/jpeg,image/png,image/bmp\" onChange={e => setNewProfileImage(e.target.files[0])} required/>\r\n                            </div>\r\n                            <button onClick={changeProfileImage}>Submit</button>\r\n                        </div>\r\n                    </div>\r\n                </>}\r\n                {isCreatePostOpen && <>\r\n                    <div onClick={() => setIsCreatePostOpen(false)} className='modal-window__close'></div>\r\n                    <div className='modal-window'>\r\n                        {isChangesLoading && <Spinner />}\r\n                        <i onClick={() => setIsCreatePostOpen(false)} className={\"material-icons close-btn\"}>clear</i>\r\n                        <div className='inner'>\r\n                            <h1>New Post</h1>\r\n                            <div>\r\n                                <span>Post image</span>\r\n                                <input type='file' accept=\"image/jpeg,image/png,image/bmp\" onChange={e => setNewPostImage(e.target.files[0])} required/>\r\n                                <span>Your comment</span>\r\n                                <input type='text' placeholder='Enter...' value={body} onChange={e => setBody(e.target.value)} required/>\r\n                            </div>\r\n                            <button onClick={setPostData}>Submit</button>\r\n                        </div>\r\n                    </div>\r\n                </>}\r\n                {(selectedPost && isPostDetailOpen) && \r\n                <>\r\n                    <div onClick={() => setIsPostDetailOpen(false)} className='modal-window__close'></div>\r\n                    <div className='modal-window'>\r\n                        {isChangesLoading && <Spinner />}\r\n                        <i onClick={() => deletePost(selectedPost._id)} className={\"material-icons delete-btn\"}>delete</i>\r\n                        <i onClick={() => setIsPostDetailOpen(false)} className={\"material-icons close-btn\"}>clear</i>\r\n                        <PostItem post={selectedPost} />\r\n                    </div>\r\n                </>}\r\n            </div>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        token: state.auth.token,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        login: (token, user) => {\r\n            dispatch(loginAC(token, user));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);","import { connect } from 'react-redux';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport PostItem from '../HomePage/PostItem';\r\nimport imgParams from '../../hooks/imgParams.hook';\r\nimport { setChatAC, setDialogsAC, setIsDialogSelectedAC, setMessagesAC } from '../../redux/dialogs-reducer';\r\nimport SpinnerSmall from '../../components/Spinner/SpinnerSmall';\r\nimport './Profile.scss';\r\n\r\nconst Profile = (props) => {\r\n    const history = useHistory();\r\n    const {request} = useHttp(); \r\n    const [userProfile, setUserProfile] = useState(null);\r\n    const [isFollowing, setIsFollowing] = useState(null);\r\n    const [profileImgParams, setProfileImgParams] = useState(null);\r\n    const {userId} = useParams();\r\n    const [isPostDetailOpen, setIsPostDetailOpen] = useState(false);\r\n    const [selectedPost, setSelectedPost] = useState(null);\r\n    const [newMessage, setNewMessage] = useState('');\r\n    const [isOpenedNewMessageField, setIsOpenedNewMessageField] = useState(false);\r\n    const [isSendingNewMessage, setIsSendingNewMessage] = useState(false);\r\n\r\n    useEffect(async () => {\r\n        const data = await request(`/api/users/get/user/${userId}`, 'GET', null, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        });\r\n        \r\n        imgParams(data.posts).then(posts => {\r\n            setUserProfile({posts, user: data.user});\r\n            setIsFollowing(data.user.followers.includes(props.user._id));\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        document.onmouseup = (e) => {\r\n            const input = document.querySelector('.new-message');\r\n            \r\n            if (!e.path.includes(input)) {\r\n                setIsOpenedNewMessageField(false);\r\n            }\r\n        }\r\n        \r\n        return () => document.onmouseup = null;\r\n    }, [isOpenedNewMessageField]);\r\n\r\n    useEffect(() => {\r\n        if (userProfile) {\r\n            imgParams(userProfile.user.profileImg).then(params => {\r\n                setProfileImgParams(params);\r\n            });\r\n        }\r\n    }, [userProfile])\r\n\r\n    const followUser = async () => {\r\n        await request(`/api/users/put/follow`, 'PUT', {followId: userId}, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        }); \r\n        \r\n        setUserProfile(prev => {\r\n            prev.user.followers.push('');\r\n            return prev;\r\n        });\r\n\r\n        setIsFollowing(true);\r\n    }\r\n\r\n    const unfollowUser = async () => {\r\n        await request(`/api/users/put/unfollow`, 'PUT', {unfollowId: userId}, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        }); \r\n        \r\n        setUserProfile(prev => {\r\n            prev.user.followers.pop();\r\n            return prev;\r\n        });\r\n\r\n        setIsFollowing(false);\r\n    }\r\n\r\n    const sendMessage = async () => {\r\n        try {\r\n            if (newMessage) {\r\n                setIsSendingNewMessage(true);\r\n                setNewMessage('');\r\n                let foundChat = null;\r\n                let extra = null; \r\n                const chatName = null;\r\n\r\n                const allChats = await request('/api/chats/get/conversations', 'GET', null, {\r\n                    Authorization: `Bearer ${props.token}`,\r\n                });\r\n                \r\n                allChats.forEach(chat => {\r\n                    chat.extra.forEach(item => {\r\n                        if (item.id === userId) {\r\n                            foundChat = chat.id;\r\n                        } \r\n                    })\r\n                });\r\n\r\n                if (foundChat) {\r\n                    await request(`/api/chats/new/message?id=${foundChat}`, 'POST', {\r\n                        message: newMessage,\r\n                        timestamp: Date.now()\r\n                    }, {Authorization: `Bearer ${props.token}`});\r\n                } else {\r\n                    const data = await request('/api/chats/new/conversation', 'POST', {chatName, other: userId}, {Authorization: `Bearer ${props.token}`});\r\n\r\n                    foundChat = data._id\r\n\r\n                    await request(`/api/chats/new/message?id=${foundChat}`, 'POST', {\r\n                        message: newMessage,\r\n                        timestamp: Date.now()\r\n                    }, {Authorization: `Bearer ${props.token}`});\r\n                }\r\n\r\n                const chat = await request(`/api/chats/get/conversation?id=${foundChat}`, 'GET', null, {Authorization: `Bearer ${props.token}`});\r\n\r\n                props.setMessages(chat.conversation);\r\n\r\n                chat.extra.forEach(el => {\r\n                    if (el.id !== props.user._id) {\r\n                        extra = {...el};\r\n                    }\r\n                });\r\n\r\n                props.setChat({\r\n                    chatName: extra.displayName || chat.chatName,\r\n                    chatImg: extra.profileImg || chat.chatImg,\r\n                    participantId: extra.id,\r\n                    chatId: props.id\r\n                });\r\n\r\n                props.setIsDialogSelected(true);\r\n                setIsSendingNewMessage(false);\r\n\r\n                history.push('/dialogs');\r\n            }\r\n        } catch(err) {console.log(err)}\r\n    }\r\n    \r\n    return(\r\n        <>\r\n        {\r\n            !userProfile ?\r\n            <Spinner />\r\n            :\r\n            <div className='profile-page'>\r\n                <div className='profile__info'>\r\n                    <div className='avatar'>\r\n                        <img style={profileImgParams} src={userProfile.user.profileImg} alt=''/>\r\n                    </div> \r\n                    <div className='info'>\r\n                        <div className='name-settings'>\r\n                            <h1>{userProfile.user.displayName}</h1>\r\n                            <div className='btn-wrapper'>\r\n                                {\r\n                                    isFollowing ? \r\n                                    <button onClick={unfollowUser}>Unfollow</button>\r\n                                    :\r\n                                    <button onClick={followUser}>Follow</button>\r\n                                }\r\n                                <button onClick={() => setIsOpenedNewMessageField(!isOpenedNewMessageField)}>Send message</button>\r\n                                {isOpenedNewMessageField &&\r\n                                    <div className='new-message'>\r\n                                        <input \r\n                                            value={newMessage} \r\n                                            onChange={e => setNewMessage(e.target.value)} \r\n                                            onKeyUp={e => (e.keyCode === 13 && newMessage) ? sendMessage() : false} \r\n                                            type='text' \r\n                                            placeholder='Enter your message'/>\r\n                                        <button \r\n                                            onClick={sendMessage} \r\n                                            disabled={!newMessage}>\r\n                                                {isSendingNewMessage && <SpinnerSmall />}\r\n                                                <i className={\"material-icons\"} style={{fontSize: '35px', cursor: 'pointer', width: '35px'}}>send</i>\r\n                                        </button>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='attributes'>\r\n                            <h3><strong>{userProfile.posts.length}</strong> posts</h3>\r\n                            <h3><strong>{userProfile.user.followers.length}</strong> followers</h3>\r\n                            <h3><strong>{userProfile.user.following.length}</strong> following</h3>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='mobile-attributes'>\r\n                    <h3><strong>{userProfile.posts.length}</strong> posts</h3>\r\n                    <h3><strong>{userProfile.user.followers.length}</strong> followers</h3>\r\n                    <h3><strong>{userProfile.user.following.length}</strong> following</h3>\r\n                </div>\r\n                <div className='profile__gallery'>\r\n                {/* <i onClick={deletePost} className={\"material-icons\"} style={{fontSize: '30px', cursor: 'pointer', float: 'right'}}>delete</i> */}\r\n                {userProfile.posts.map(post => <div onClick={() => {setSelectedPost(post); setIsPostDetailOpen(true)}} key={post._id}><div><img src={post.picture} alt=\"\"  style={post.params}/></div></div>)}\r\n                </div>\r\n                {(selectedPost && isPostDetailOpen) && <>\r\n                    <div onClick={() => setIsPostDetailOpen(false)} className='modal-window__close'></div>\r\n                    <div className='modal-window'>\r\n                        <i onClick={() => setIsPostDetailOpen(false)} className={\"material-icons close-btn\"}>clear</i>\r\n                        <PostItem post={selectedPost} />\r\n                    </div>\r\n                </>}\r\n            </div>\r\n        }\r\n        </>        \r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        token: state.auth.token,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setDialogs: (dialogs) => {\r\n            dispatch(setDialogsAC(dialogs));\r\n        },\r\n        setMessages: (messages) => {\r\n            dispatch(setMessagesAC(messages));\r\n        },\r\n        setChat: chat => {\r\n            dispatch(setChatAC(chat))\r\n        },\r\n        setIsDialogSelected: (a) => {\r\n            dispatch(setIsDialogSelectedAC(a))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);","import { Avatar } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport './Users.scss';\r\n\r\nconst Users = (props) => {\r\n    const {request} = useHttp();\r\n    const [searchUsers, setSearchUsers] = useState('');\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [foundUsers, setFoundUsers] = useState([]);\r\n    const [allUsers, setAllUsers] = useState([]);\r\n\r\n    useEffect(async () => {\r\n        try{\r\n            setIsLoading(true);\r\n            const users = await request('/api/users/get/users', 'GET', null, {Authorization: `Bearer ${props.token}`});\r\n            setAllUsers(users);\r\n            setIsLoading(false);\r\n        } catch (err) {console.log(err)}\r\n    }, []);\r\n\r\n    useEffect(async () => {\r\n        if (searchUsers) {\r\n            try{\r\n                setIsLoading(true);\r\n                const users = await request('/api/users/post/users-search', 'POST', {query: searchUsers}, {Authorization: `Bearer ${props.token}`});\r\n                setFoundUsers(users);\r\n                setIsLoading(false);\r\n            } catch (err) {console.log(err)}\r\n        } else {\r\n            setFoundUsers([]);\r\n        }\r\n    }, [searchUsers]);\r\n\r\n    return (\r\n        <div className='users-page'>\r\n            <div className=\"search-user\">\r\n                <i className=\"material-icons\" style={{position: 'absolute', top: '50%', transform: 'translateY(-50%)'}}>search</i>\r\n                <input type=\"text\" placeholder=\"Search...\" className=\"search-input\" value={searchUsers} onChange={(e) => setSearchUsers(e.target.value)}/>\r\n                </div>\r\n                {\r\n                    foundUsers.length !== 0 ?\r\n                    <div className=\"dropdown-content\">\r\n                        {foundUsers.map(user => {\r\n                            return (\r\n                                <Link to={props.user._id !== user._id ? '/profile/' + user._id : '/profile'} \r\n                                    key={user._id} \r\n                                    onClick={() => setSearchUsers('')}>\r\n                                        <div>\r\n                                            <Avatar src={user.profileImg}/>\r\n                                            <p>{user.displayName}</p>\r\n                                        </div>\r\n                                </Link>\r\n                            )\r\n                        })}\r\n                    </div> \r\n                    :\r\n                    <div className=\"dropdown-content\">\r\n                        {allUsers.map(user => {\r\n                            return (\r\n                                <Link to={props.user._id !== user._id ? '/profile/' + user._id : '/profile'} \r\n                                    key={user._id} \r\n                                    onClick={() => setSearchUsers('')}>\r\n                                        <div>\r\n                                            <Avatar src={user.profileImg}/>\r\n                                            <p>{user.displayName}</p>\r\n                                        </div>\r\n                                </Link>\r\n                            )\r\n                        })}\r\n                    </div> \r\n                }\r\n                {isLoading && <Spinner />}\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        token: state.auth.token,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Users);","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Slider from '../../components/Slider/Slider';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport PostItem from './PostItem';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport './HomePage.scss';\r\n\r\nconst HomePage = (props) => {\r\n    const [allPosts, setAllPosts] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const {request} = useHttp();\r\n\r\n    useEffect(async () => {\r\n        const data = await request('/api/posts/get/posts', 'GET', null, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        });\r\n        setAllPosts(data.posts)\r\n        setLoading(false)\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {loading ? \r\n                <Spinner/>\r\n                :\r\n                <div className='home-page'>\r\n                    {/* <div className='element'>\r\n                        <Slider imgWidth={1200} imgHeight={500}/>\r\n                    </div> */}\r\n                    <div className='home-page__inner'>\r\n                        {allPosts.map(post => <PostItem post={post} key={post._id}/>)}\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    token: state.auth.token\r\n});\r\n\r\nexport default connect(mapStateToProps)(HomePage);","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport { loginAC } from '../../redux/auth-reducer';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport './AuthPage.scss';\r\n\r\nconst AuthPage = (props) => {\r\n    const {login} = props;\r\n    const {request} = useHttp();\r\n    const [loading, setLoading] = useState(false);\r\n    const [form, setForm] = useState({\r\n        email: '',\r\n        displayName: '',\r\n        password: ''\r\n    });\r\n    const [isRegistrateForm, setIsRegistrateForm] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const data = JSON.parse(sessionStorage.getItem('storageName'));\r\n        \r\n        if (data && data.token) {\r\n            login(data.token, data.user);\r\n        }\r\n    }, [login])\r\n\r\n    const changeHandler = e => {\r\n        setForm({...form, [e.target.name]: e.target.value});\r\n    }\r\n\r\n    const registerHandler = async () => {\r\n        try {\r\n            setLoading(true);\r\n            await request('/api/auth/register', 'POST', {...form}, {Authorization: `Bearer ${props.token}`});\r\n            setLoading(false);\r\n            changeFormHandler();\r\n        } catch (err) {\r\n            alert(err);\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const loginHandler = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const data = await request('/api/auth/login', 'POST', {...form}, {Authorization: `Bearer ${props.token}`});\r\n            \r\n            login(data.token, data.user);\r\n        } catch (err) {\r\n            alert(err.message);\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const changeFormHandler = () => {\r\n        setIsRegistrateForm(!isRegistrateForm);\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            {loading ?\r\n                <Spinner />\r\n                :\r\n                <div className='split-screen'>\r\n                    <div className='left'>\r\n                        <section className='copy'>\r\n                            <h1>Kalina</h1>\r\n                            <p>Text for the beauty.</p>\r\n                        </section>\r\n                    </div>\r\n                    <div className='right'>\r\n                        <form>\r\n                            <section className='copy'>\r\n                                <h2>Sign {isRegistrateForm ? 'up' : 'in'}</h2>\r\n                                <div className='login-container'>\r\n                                    {isRegistrateForm ?\r\n                                        <p>Already have an account? <a onClick={changeFormHandler}><strong>Sign in!</strong></a></p>\r\n                                        :\r\n                                        <p>Don't have an account? <a onClick={changeFormHandler}><strong>Sign up!</strong></a></p>\r\n                                    }\r\n                                </div>\r\n                            </section>\r\n                            {isRegistrateForm && <div className='input-container name'>\r\n                                <label htmlFor='displayName'>Nickname</label>\r\n                                <input \r\n                                    name=\"displayName\"\r\n                                    id=\"displayName\" \r\n                                    type=\"text\"\r\n                                    value={form.displayName}\r\n                                    onChange={changeHandler}\r\n                                    required\r\n                                    placeholder='From 4 to 12 characters' \r\n                                    minLength=\"4\" \r\n                                    maxLength=\"12\"/>\r\n                            </div>}\r\n                            <div className='input-container email'>\r\n                                <label htmlFor='email'>Email</label>\r\n                                <input \r\n                                    name=\"email\"\r\n                                    id=\"email\" \r\n                                    type=\"email\" \r\n                                    value={form.email}\r\n                                    onChange={changeHandler}\r\n                                    required/>\r\n                            </div>\r\n                            <div className='input-container password'>\r\n                                <label htmlFor='password'>Password</label>\r\n                                <input \r\n                                    name=\"password\"\r\n                                    id=\"password\" \r\n                                    type=\"password\" \r\n                                    value={form.password}\r\n                                    onChange={changeHandler}\r\n                                    placeholder='At least 6 characters!' \r\n                                    required\r\n                                    minLength=\"6\" />\r\n                                <i className='far fa-eye-slash' />\r\n                            </div>\r\n                            {isRegistrateForm ?\r\n                                <button className='signup-btn' type='submit' onClick={registerHandler}>Sign up</button>\r\n                                :\r\n                                <button className='signup-btn' type='submit' onClick={loginHandler}>Sign in</button>\r\n                            }\r\n                            <section className='copy legal'>\r\n                                <p>\r\n                                    <span className='small'>\r\n                                        By continuing, you agree to accept our <br/><a>Privacy Policy</a> & <a>Terms of Service</a>.\r\n                                    </span>\r\n                                </p>\r\n                            </section>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        token: state.auth.token\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        login: (token, user) => {\r\n            dispatch(loginAC(token, user));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthPage);","import React, { useEffect, useRef } from 'react';\r\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\r\nimport Header from \"./components/Header/Header\";\r\nimport { connect } from 'react-redux';\r\nimport { useRoutes } from './routes';\r\nimport { loginAC } from './redux/auth-reducer';\r\nimport AuthPage from './pages/AuthPage/AuthPage';\r\nimport './App.scss';\r\n\r\nconst App = (props) => {\r\n    const data = JSON.parse(sessionStorage.getItem('storageName'));\r\n    const app = useRef(null);\r\n\r\n    const isAuthenticated = !!props.token;\r\n    const routes = useRoutes();\r\n\r\n    if (data && data.token) {\r\n        props.login(data.token, data.user);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fixOffset()\r\n        \r\n        window.addEventListener('resize', fixOffset);\r\n\r\n        return () => window.removeEventListener('resize', fixOffset);\r\n    }, [isAuthenticated]);\r\n\r\n    function fixOffset() {\r\n        try{\r\n            app.current.style.height = document.body.clientHeight - (isAuthenticated ? 40 : 0) + 'px';\r\n        } catch {}    \r\n    }\r\n\r\n    return (\r\n        <Router>\r\n            {!isAuthenticated ? \r\n                <Route path=\"/\" exact component={AuthPage} />\r\n                :\r\n                <>\r\n                    <div className='main'>\r\n                        <Header />\r\n                        <div ref={app} className='app'> \r\n                            <div className='app-inner'>\r\n                                {routes}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            }\r\n        </Router>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    token: state.auth.token\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        login: (token, user) => {\r\n            dispatch(loginAC(token, user));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React from 'react';\r\nimport {Switch, Route} from 'react-router-dom';\r\nimport DialogsPage from './pages/DialogsPage/DialogsPage';\r\nimport ProfilePage from './pages/ProfilePage/Profile';\r\nimport UserProfile from './pages/ProfilePage/UserProfile';\r\nimport UsersPage from './pages/UsersPage/Users';\r\nimport HomePage from './pages/HomePage/HomePage';\r\n\r\nexport const useRoutes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path='/dialogs' component={DialogsPage}/>\r\n            <Route exact path='/profile' render={ () => <ProfilePage /> }/>\r\n            <Route exact path='/profile/:userId' render={ () => <UserProfile /> }/>\r\n            <Route exact path='/users' render={ () => <UsersPage /> }/>\r\n            <Route exact path=\"/\" component={HomePage}/>\r\n        </Switch>\r\n    )\r\n}\r\n","import store from \"./redux/store\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {Provider} from \"react-redux\";\r\nimport './index.scss';\r\n\r\n\r\nlet vh = window.innerHeight * 0.01;\r\ndocument.documentElement.style.setProperty('--vh', `${vh}px`);\r\n\r\nwindow.addEventListener('resize', () => {\r\n  let vh = window.innerHeight * 0.01;\r\n  document.documentElement.style.setProperty('--vh', `${vh}px`);\r\n});\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById('root'));"],"sourceRoot":""}