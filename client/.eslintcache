[{"D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\index.js":"1","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\App.js":"2","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\redux\\store.js":"3","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\routes.js":"4","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\redux\\dialogs-reducer.js":"5","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\redux\\auth-reducer.js":"6","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\hooks\\http.hook.js":"7","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\components\\Spinner\\spinner.js":"8","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\components\\Slider\\Slider.js":"9","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\components\\Header\\Header.js":"10","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\AuthPage\\AuthPage.js":"11","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\HomePage\\HomePage.js":"12","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\DialogsPage\\Dialogs\\DialogItem.js":"13","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\DialogsPage\\DialogsPage.js":"14","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\DialogsPage\\Dialogs\\Dialogs.js":"15","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\DialogsPage\\Messages\\Messages.js":"16","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\DialogsPage\\Messages\\MessageItem.js":"17","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\ProfilePage\\Profile.js":"18","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\HomePage\\PostItem.js":"19","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\components\\Spinner\\Spinner.js":"20","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\ProfilePage\\UserProfile.js":"21","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\UsersPage\\Users.js":"22","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\hooks\\imgParams.hook.js":"23","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\hooks\\toLocalDate.hook.js":"24","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\components\\Spinner\\SpinnerSmall.js":"25"},{"size":570,"mtime":1617980658035,"results":"26","hashOfConfig":"27"},{"size":1922,"mtime":1617981203742,"results":"28","hashOfConfig":"27"},{"size":308,"mtime":1617899875002,"results":"29","hashOfConfig":"27"},{"size":806,"mtime":1617221341763,"results":"30","hashOfConfig":"27"},{"size":1679,"mtime":1617978379359,"results":"31","hashOfConfig":"27"},{"size":903,"mtime":1613761712963,"results":"32","hashOfConfig":"27"},{"size":825,"mtime":1617988010889,"results":"33","hashOfConfig":"27"},{"size":272,"mtime":1616932481970,"results":"34","hashOfConfig":"35"},{"size":5177,"mtime":1617981242000,"results":"36","hashOfConfig":"27"},{"size":3223,"mtime":1617981004193,"results":"37","hashOfConfig":"27"},{"size":6210,"mtime":1617980332560,"results":"38","hashOfConfig":"27"},{"size":1389,"mtime":1617980467298,"results":"39","hashOfConfig":"27"},{"size":4132,"mtime":1617980360285,"results":"40","hashOfConfig":"27"},{"size":678,"mtime":1617980959460,"results":"41","hashOfConfig":"27"},{"size":3865,"mtime":1617988936353,"results":"42","hashOfConfig":"27"},{"size":6444,"mtime":1617982249618,"results":"43","hashOfConfig":"27"},{"size":656,"mtime":1617811117818,"results":"44","hashOfConfig":"27"},{"size":9702,"mtime":1617980540489,"results":"45","hashOfConfig":"27"},{"size":5084,"mtime":1617980481793,"results":"46","hashOfConfig":"27"},{"size":276,"mtime":1616939396940,"results":"47","hashOfConfig":"27"},{"size":9986,"mtime":1617980574359,"results":"48","hashOfConfig":"27"},{"size":3657,"mtime":1617980602932,"results":"49","hashOfConfig":"27"},{"size":1144,"mtime":1617636599561,"results":"50","hashOfConfig":"27"},{"size":349,"mtime":1617741523939,"results":"51","hashOfConfig":"27"},{"size":445,"mtime":1617913306989,"results":"52","hashOfConfig":"27"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"1rnyk1d",{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"55"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yptu8l",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"55"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"55"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"55"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"55"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"55"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"55"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"55"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\index.js",[],["114","115"],"D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\App.js",["116"],"import React, { useEffect, useRef } from 'react';\r\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\r\nimport Header from \"./components/Header/Header\";\r\nimport { connect } from 'react-redux';\r\nimport { useRoutes } from './routes';\r\nimport { loginAC } from './redux/auth-reducer';\r\nimport AuthPage from './pages/AuthPage/AuthPage';\r\nimport './App.scss';\r\n\r\nconst App = (props) => {\r\n    const data = JSON.parse(sessionStorage.getItem('storageName'));\r\n    const app = useRef(null);\r\n\r\n    const isAuthenticated = !!props.token;\r\n    const routes = useRoutes();\r\n\r\n    if (data && data.token) {\r\n        props.login(data.token, data.user);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fixOffset()\r\n        \r\n        window.addEventListener('resize', fixOffset);\r\n\r\n        return () => window.removeEventListener('resize', fixOffset);\r\n    }, [isAuthenticated]);\r\n\r\n    function fixOffset() {\r\n        try{\r\n            app.current.style.height = document.body.clientHeight - (isAuthenticated ? 40 : 0) + 'px';\r\n        } catch {}    \r\n    }\r\n\r\n    return (\r\n        <Router>\r\n            {!isAuthenticated ? \r\n                <Route path=\"/\" exact component={AuthPage} />\r\n                :\r\n                <>\r\n                    <div className='main'>\r\n                        <Header />\r\n                        <div ref={app} className='app'> \r\n                            <div className='app-inner'>\r\n                                {routes}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            }\r\n        </Router>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    token: state.auth.token\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        login: (token, user) => {\r\n            dispatch(loginAC(token, user));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\redux\\store.js",[],"D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\routes.js",[],"D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\redux\\dialogs-reducer.js",[],"D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\redux\\auth-reducer.js",[],"D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\hooks\\http.hook.js",[],"D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\components\\Spinner\\spinner.js",[],"D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\components\\Slider\\Slider.js",[],"D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\components\\Header\\Header.js",["117","118"],"import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport { logoutAC } from '../../redux/auth-reducer';\r\nimport { Avatar } from '@material-ui/core';\r\nimport './Header.scss';\r\n\r\nconst Header = (props) => {\r\n    const {logout} = props;\r\n    const history = useHistory();\r\n    const {request} = useHttp();\r\n    const [searchUsers, setSearchUsers] = useState('');\r\n    const [foundUsers, setFoundUsers] = useState([]);\r\n\r\n    const logoutHandler = (e) => {\r\n        e.preventDefault();\r\n        logout(); \r\n        history.push('/');\r\n    };\r\n\r\n    document.onmouseup = (e) => {\r\n        const searchUser = document.querySelector('.search-user');\r\n        if (!e.path.includes(searchUser)) {\r\n            setFoundUsers([]);\r\n            setSearchUsers('');\r\n        }\r\n    }\r\n    \r\n    useEffect(async () => {\r\n        if (searchUsers) {\r\n            try{\r\n                const users = await request('/api/users/post/users-search', 'POST', {query: searchUsers}, {Authorization: `Bearer ${props.token}`});\r\n                setFoundUsers(users);\r\n            } catch (err) {console.log(err)}\r\n        } else {\r\n            setFoundUsers([]);\r\n        }\r\n    }, [searchUsers]);\r\n\r\n    return (\r\n        <div className='header-wrapper'>\r\n            <div className='header'>\r\n                <span className=\"label\"><Link to=\"/\"><big>Kalina</big></Link></span>\r\n                <div className=\"search-user\">\r\n                    <i className=\"material-icons\" style={{position: 'absolute', top: '50%', transform: 'translateY(-50%)'}}>search</i>\r\n                    <input type=\"text\" placeholder=\"Search users...\" id=\"search-input\" value={searchUsers} onChange={(e) => setSearchUsers(e.target.value)}/>\r\n                    {\r\n                        foundUsers.length !== 0 &&\r\n                        <div className=\"dropdown-content\">\r\n                            {foundUsers.map(user => <Link to={props.user._id !== user._id ? '/profile/' + user._id : '/profile'}  key={user._id} onClick={() => setSearchUsers('')}><div><Avatar src={user.profileImg}/><p>{user.displayName}</p></div></Link>)}\r\n                        </div> \r\n                    }\r\n                </div>\r\n                <div className=\"navigation\">\r\n                    <Link to=\"/\"><i className=\"material-icons\">home</i></Link>\r\n                    <Link to=\"/profile\"><i className=\"material-icons\">person</i></Link>\r\n                    <Link to=\"/dialogs\"><i className=\"material-icons\">message</i></Link>\r\n                    <Link to=\"/users\"><i className=\"material-icons\">people</i></Link>\r\n                    <Link to=\"/\" onClick={logoutHandler}><i className=\"material-icons\">exit_to_app</i></Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        token: state.auth.token,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        logout: () => {\r\n            dispatch(logoutAC());\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\AuthPage\\AuthPage.js",["119","120","121","122"],"import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport { loginAC } from '../../redux/auth-reducer';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport './AuthPage.scss';\r\n\r\nconst AuthPage = (props) => {\r\n    const {login} = props;\r\n    const {request} = useHttp();\r\n    const [loading, setLoading] = useState(false);\r\n    const [form, setForm] = useState({\r\n        email: '',\r\n        displayName: '',\r\n        password: ''\r\n    });\r\n    const [isRegistrateForm, setIsRegistrateForm] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const data = JSON.parse(sessionStorage.getItem('storageName'));\r\n        \r\n        if (data && data.token) {\r\n            login(data.token, data.user);\r\n        }\r\n    }, [login])\r\n\r\n    const changeHandler = e => {\r\n        setForm({...form, [e.target.name]: e.target.value});\r\n    }\r\n\r\n    const registerHandler = async () => {\r\n        try {\r\n            setLoading(true);\r\n            await request('/api/auth/register', 'POST', {...form}, {Authorization: `Bearer ${props.token}`});\r\n            setLoading(false);\r\n            changeFormHandler();\r\n        } catch (err) {\r\n            alert(err);\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const loginHandler = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const data = await request('/api/auth/login', 'POST', {...form}, {Authorization: `Bearer ${props.token}`});\r\n            \r\n            login(data.token, data.user);\r\n        } catch (err) {\r\n            alert(err.message);\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const changeFormHandler = () => {\r\n        setIsRegistrateForm(!isRegistrateForm);\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            {loading ?\r\n                <Spinner />\r\n                :\r\n                <div className='split-screen'>\r\n                    <div className='left'>\r\n                        <section className='copy'>\r\n                            <h1>Kalina</h1>\r\n                            <p>Text for the beauty.</p>\r\n                        </section>\r\n                    </div>\r\n                    <div className='right'>\r\n                        <form>\r\n                            <section className='copy'>\r\n                                <h2>Sign {isRegistrateForm ? 'up' : 'in'}</h2>\r\n                                <div className='login-container'>\r\n                                    {isRegistrateForm ?\r\n                                        <p>Already have an account? <a onClick={changeFormHandler}><strong>Sign in!</strong></a></p>\r\n                                        :\r\n                                        <p>Don't have an account? <a onClick={changeFormHandler}><strong>Sign up!</strong></a></p>\r\n                                    }\r\n                                </div>\r\n                            </section>\r\n                            {isRegistrateForm && <div className='input-container name'>\r\n                                <label htmlFor='displayName'>Nickname</label>\r\n                                <input \r\n                                    name=\"displayName\"\r\n                                    id=\"displayName\" \r\n                                    type=\"text\"\r\n                                    value={form.displayName}\r\n                                    onChange={changeHandler}\r\n                                    required\r\n                                    placeholder='From 4 to 12 characters' \r\n                                    minLength=\"4\" \r\n                                    maxLength=\"12\"/>\r\n                            </div>}\r\n                            <div className='input-container email'>\r\n                                <label htmlFor='email'>Email</label>\r\n                                <input \r\n                                    name=\"email\"\r\n                                    id=\"email\" \r\n                                    type=\"email\" \r\n                                    value={form.email}\r\n                                    onChange={changeHandler}\r\n                                    required/>\r\n                            </div>\r\n                            <div className='input-container password'>\r\n                                <label htmlFor='password'>Password</label>\r\n                                <input \r\n                                    name=\"password\"\r\n                                    id=\"password\" \r\n                                    type=\"password\" \r\n                                    value={form.password}\r\n                                    onChange={changeHandler}\r\n                                    placeholder='At least 6 characters!' \r\n                                    required\r\n                                    minLength=\"6\" />\r\n                                <i className='far fa-eye-slash' />\r\n                            </div>\r\n                            {isRegistrateForm ?\r\n                                <button className='signup-btn' type='submit' onClick={registerHandler}>Sign up</button>\r\n                                :\r\n                                <button className='signup-btn' type='submit' onClick={loginHandler}>Sign in</button>\r\n                            }\r\n                            <section className='copy legal'>\r\n                                <p>\r\n                                    <span className='small'>\r\n                                        By continuing, you agree to accept our <br/><a>Privacy Policy</a> & <a>Terms of Service</a>.\r\n                                    </span>\r\n                                </p>\r\n                            </section>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        token: state.auth.token\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        login: (token, user) => {\r\n            dispatch(loginAC(token, user));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthPage);","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\HomePage\\HomePage.js",["123","124","125"],"import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Slider from '../../components/Slider/Slider';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport PostItem from './PostItem';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport './HomePage.scss';\r\n\r\nconst HomePage = (props) => {\r\n    const [allPosts, setAllPosts] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const {request} = useHttp();\r\n\r\n    useEffect(async () => {\r\n        const data = await request('/api/posts/get/posts', 'GET', null, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        });\r\n        setAllPosts(data.posts)\r\n        setLoading(false)\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {loading ? \r\n                <Spinner/>\r\n                :\r\n                <div className='home-page'>\r\n                    {/* <div className='element'>\r\n                        <Slider imgWidth={1200} imgHeight={500}/>\r\n                    </div> */}\r\n                    <div className='home-page__inner'>\r\n                        {allPosts.map(post => <PostItem post={post} key={post._id}/>)}\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    token: state.auth.token\r\n});\r\n\r\nexport default connect(mapStateToProps)(HomePage);","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\DialogsPage\\Dialogs\\DialogItem.js",["126","127"],"import React, { useEffect, useState } from 'react';\r\nimport './DialogItem.scss';\r\nimport { Avatar } from '@material-ui/core';\r\nimport Pusher from 'pusher-js';\r\nimport { setChatAC, setDialogsAC, setIsDialogSelectedAC, setIsDialogsLoadingAC, setMessagesAC } from \"../../../redux/dialogs-reducer\";\r\nimport { connect } from 'react-redux';\r\nimport { useHttp } from '../../../hooks/http.hook';\r\nimport toLocalDate from '../../../hooks/toLocalDate.hook';\r\n\r\nconst pusher = new Pusher('b634efb073fba40fbf3a', {\r\n    cluster: 'eu'\r\n});\r\n\r\nconst DialogItem = (props) => {\r\n    const {dialog, index} = props;\r\n    const {request} = useHttp();\r\n    const [dialogsLastMsg, setDialogsLastMsg] = useState({});\r\n    const [extra, setExtra] = useState({});\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        props.extra.forEach(el => {\r\n            if (el.id !== props.user._id) {\r\n                setExtra(el);\r\n            }\r\n        });\r\n        \r\n        return () =>  props.setIsDialogSelected(false);\r\n    }, []);\r\n    \r\n    const getLastMessage = async () => {\r\n        try {\r\n            const data = await request(`/api/chats/get/lastMessage?id=${dialog.id}`, 'GET', null, {Authorization: `Bearer ${props.token}`});\r\n            setDialogsLastMsg(data);\r\n            setIsLoading(false);\r\n\r\n            if (index) props.setIsDialogsLoading(false);\r\n        } catch(err) {console.log(err)}\r\n    }\r\n\r\n    useEffect(() => {\r\n        getLastMessage();\r\n        \r\n        const channel = pusher.subscribe('messages');\r\n        channel.bind('newMessage', () => {\r\n            getLastMessage();   \r\n        });\r\n\r\n        return () => {\r\n            channel.unbind_all();\r\n            channel.unsubscribe();\r\n        };\r\n    }, [dialog.id]);\r\n\r\n    const selectedDialog = async () => {\r\n        try {\r\n            const data = await request(`/api/chats/get/conversation?id=${dialog.id}`, 'GET', null, {Authorization: `Bearer ${props.token}`});\r\n            props.setMessages(data.conversation);\r\n            props.setChat({\r\n                chatName: extra.displayName || data.chatName,\r\n                chatImg: extra.profileImg || data.chatImg,\r\n                participantId: extra.id,\r\n                chatId: dialog.id\r\n            });\r\n            props.setIsDialogSelected(true);\r\n        } catch(err) {console.log(err)}\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {\r\n            !isLoading &&\r\n            <div onClick={selectedDialog} className='dialogItem'>\r\n                <div className='dialogItem__info'>\r\n                    <div className='dialogItem__info-avatar'><Avatar src={extra.profileImg}/></div>\r\n                    <div className='dialogItem__info-main'>\r\n                        <div><h1>{dialog.name || extra.displayName}</h1></div>\r\n                        <span className='dialogItem__info-message'>{dialogsLastMsg.owner.displayName}: {dialogsLastMsg.message}</span>\r\n                    </div>\r\n                    <div className=\"timeStamp\">\r\n                        <div>{toLocalDate(parseInt(dialogsLastMsg.timestamp)).date}</div>\r\n                        <div>{toLocalDate(parseInt(dialogsLastMsg.timestamp)).time}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        isDialogsLoading: state.dialogsPage.isDialogsLoading,\r\n        token: state.auth.token,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setDialogs: (dialogs) => {\r\n            dispatch(setDialogsAC(dialogs));\r\n        },\r\n        setMessages: (messages) => {\r\n            dispatch(setMessagesAC(messages));\r\n        },\r\n        setChat: chat => {\r\n            dispatch(setChatAC(chat))\r\n        },\r\n        setIsDialogSelected: (a) => {\r\n            dispatch(setIsDialogSelectedAC(a))\r\n        },\r\n        setIsDialogsLoading: (a) => {\r\n            dispatch(setIsDialogsLoadingAC(a))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DialogItem);","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\DialogsPage\\DialogsPage.js",[],"D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\DialogsPage\\Dialogs\\Dialogs.js",["128","129"],"D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\DialogsPage\\Messages\\Messages.js",["130"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport { AttachFile, SearchOutlined } from '@material-ui/icons';\r\nimport Pusher from 'pusher-js';\r\nimport MessageItem from './MessageItem';\r\nimport { useHttp } from '../../../hooks/http.hook';\r\nimport Picker from 'emoji-picker-react';\r\nimport { Link } from 'react-router-dom';\r\nimport SpinnerSmall from '../../../components/Spinner/SpinnerSmall';\r\nimport {sendMessageCreator, setChatAC, setIsDialogSelectedAC, setMessagesAC} from \"../../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport './Messages.scss';\r\n\r\nconst Messages = (props) => {\r\n    const {request} = useHttp();\r\n    const [newMessage, setNewMessage] = useState('');\r\n    const [isOpenedEmoji, setIsOpenedEmoji] = useState(false);\r\n    const [isSendingNewMessage, setIsSendingNewMessage] = useState(false);\r\n    const [chosenEmoji, setChosenEmoji] = useState(null);\r\n    const inputMessage = useRef(null);\r\n\r\n    const onEmojiClick = (event, emojiObject) => {\r\n        setChosenEmoji(emojiObject);\r\n    };\r\n    \r\n    useEffect(() => {\r\n        document.onmouseup = (e) => {\r\n            inputMessage.current.focus();\r\n            const emojiDiv = document.querySelector('.emojiDiv');\r\n            if (!e.path.includes(emojiDiv)) {\r\n                setIsOpenedEmoji(false);\r\n            }\r\n        }\r\n        \r\n        return () => document.onmouseup = null;\r\n    }, [isOpenedEmoji]);\r\n    \r\n    const onSendMessageClick = async () => {\r\n        setNewMessage('');\r\n        setIsOpenedEmoji(false);\r\n        setIsSendingNewMessage(true);\r\n        try {\r\n            await request(`/api/chats/new/message?id=${props.chat.chatId}`, 'POST', {\r\n                message: newMessage,\r\n                timestamp: Date.now()\r\n            }, {Authorization: `Bearer ${props.token}`});\r\n        } catch(err) {console.log(err)}\r\n    }\r\n\r\n    const fixScroll = () => {\r\n        try {\r\n            const block = document.querySelector('.messages__body');\r\n            block.scrollTop = block.scrollHeight;\r\n        } catch{}\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', () => fixScroll());\r\n        inputMessage.current.focus();\r\n        \r\n        return () => window.removeEventListener('resize', () => fixScroll());\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const pusher = new Pusher('b634efb073fba40fbf3a', {\r\n            cluster: 'eu'\r\n        });\r\n      \r\n        const channel = pusher.subscribe('messages');\r\n        channel.bind('newMessage', async () => {\r\n            try {\r\n                const data = await request(`/api/chats/get/conversation?id=${props.chat.chatId}`, 'GET', null, {Authorization: `Bearer ${props.token}`});\r\n                props.setMessages(data.conversation);\r\n                fixScroll();\r\n                setIsSendingNewMessage(false);\r\n            } catch {}\r\n        });\r\n\r\n        fixScroll();\r\n\r\n        return () => {\r\n            channel.unbind_all();\r\n            channel.unsubscribe();\r\n        };\r\n    }, [props.chat.chatId]);\r\n\r\n    useEffect(() => {\r\n        if (chosenEmoji)\r\n        setNewMessage(prev => prev + chosenEmoji.emoji);\r\n    }, [chosenEmoji]);\r\n\r\n    return (\r\n        <div className='messages'>\r\n            <div className='messages__header'>\r\n                <div className=\"btnBack\" style={{height: '50px', width: '30px'}}>\r\n                    <i onClick={() => props.setIsDialogSelected(false)} className=\"material-icons\" style={{fontSize: '50px', position: 'absolute', left: '-5px'}}>chevron_left</i>\r\n                </div>\r\n                <div className='messages__headerInfo'>\r\n                    <Link  to={'/profile/' + props.chat.participantId}>\r\n                        <Avatar src={props.chat.chatImg}/>\r\n                        <div><p>{props.chat.chatName}</p></div>\r\n                    </Link>\r\n                </div>\r\n                <div className='messages__headerRight'>\r\n                    <IconButton>\r\n                        <SearchOutlined/>\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <AttachFile/>\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n            <div className='messages__body'>\r\n                { props.messages.map( message => <MessageItem userId={props.user._id} message={message} key={message._id} /> ) }\r\n            </div>\r\n            <div className='messages__footer'>\r\n                <i onClick={() => setIsOpenedEmoji(!isOpenedEmoji)} \r\n                    className={\"material-icons emojicon\"} \r\n                    style={{fontSize: '35px', cursor: 'pointer', width: '35px'}} >insert_emoticon</i>\r\n                <input \r\n                    ref={inputMessage}\r\n                    value={newMessage} \r\n                    onChange={e => {setNewMessage(e.target.value); setIsOpenedEmoji(false);}} \r\n                    onKeyUp={e => (e.keyCode === 13 && newMessage) ? onSendMessageClick() : false} \r\n                    type='text' \r\n                    placeholder='Enter your message'/>\r\n                <button onClick={onSendMessageClick} disabled={!newMessage}>\r\n                    <i className={\"material-icons\"} style={{fontSize: '35px', cursor: 'pointer', width: '35px'}}>send</i>\r\n                    {isSendingNewMessage && <SpinnerSmall />}\r\n                </button>\r\n            </div>\r\n            {isOpenedEmoji && \r\n            <div className='emojiDiv' style={{position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', zIndex: '1000'}}>\r\n                <Picker disableAutoFocus={true} onEmojiClick={onEmojiClick} />\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.dialogsPage.messages,\r\n        chat: state.dialogsPage.chat,\r\n        user: state.auth.user,\r\n        token: state.auth.token\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: () => {\r\n            dispatch(sendMessageCreator());\r\n        },\r\n        setMessages: (messages) => {\r\n            dispatch(setMessagesAC(messages));\r\n        },\r\n        setChat: chat => {\r\n            dispatch(setChatAC(chat))\r\n        },\r\n        setIsDialogSelected: (a) => {\r\n            dispatch(setIsDialogSelectedAC(a))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Messages);","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\DialogsPage\\Messages\\MessageItem.js",[],"D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\ProfilePage\\Profile.js",["131","132"],"import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport { loginAC } from '../../redux/auth-reducer';\r\nimport PostItem from '../HomePage/PostItem';\r\nimport imgParams from '../../hooks/imgParams.hook';\r\nimport './Profile.scss';\r\n\r\n\r\nconst Profile = (props) => {\r\n    const {request} = useHttp();\r\n    const [isCreatePostOpen, setIsCreatePostOpen] = useState(false);\r\n    const [isPostDetailOpen, setIsPostDetailOpen] = useState(false);\r\n    const [isChangingProfileImage, setIsChangingProfileImage] = useState(false);\r\n    const [body, setBody] = useState('');\r\n    const [newPostImage, setNewPostImage] = useState('');\r\n    const [newProfileImage, setNewProfileImage] = useState('');\r\n    const [myPosts, setMyPosts] = useState(null);\r\n    const [followData, setFollowData] = useState(null);\r\n    const [profileImgParams, setProfileImgParams] = useState(null);\r\n    const [isChangesLoading, setIsChangesLoading] = useState(false);\r\n    const [selectedPost, setSelectedPost] = useState(null);\r\n    \r\n    useEffect(async () => {\r\n        const data = await request('/api/posts/get/myposts', 'GET', null, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        });\r\n        \r\n        const newfollowData = await request('/api/users/get/myfollowdata', 'GET', null, {\r\n            Authorization: `Bearer ${props.token}`\r\n        });\r\n        console.log(newfollowData)\r\n        setFollowData(newfollowData);\r\n\r\n        imgParams(data.posts).then((data) => {\r\n            setMyPosts(data);\r\n        });\r\n\r\n        imgParams(props.user.profileImg).then(params => {\r\n            setProfileImgParams(params);\r\n        });\r\n    }, []);\r\n\r\n    const setPostData = async () => {\r\n        setIsChangesLoading(true);\r\n        const formData = new FormData();\r\n        formData.append('file', newPostImage);\r\n        formData.append('upload_preset', 'kalina-why-not');\r\n        formData.append('cloud_name', 'kalina-why-not');\r\n        await fetch('https://api.cloudinary.com/v1_1/kalina-why-not/image/upload', {\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n        .then(res => res.json())\r\n        .then(async formData => {\r\n            const newPost = await request('/api/posts/new/post', 'POST', {body, picture: formData.url}, {\r\n                Authorization: `Bearer ${props.token}`,\r\n            });\r\n\r\n            imgParams([newPost]).then((data) => {\r\n                setMyPosts([data[0], ...myPosts]);\r\n                setIsChangesLoading(false);\r\n                setIsCreatePostOpen(false);\r\n            });\r\n        })\r\n        .catch(err => {\r\n            setIsChangesLoading(false);\r\n            alert(err);\r\n        });\r\n    };\r\n\r\n    const changeProfileImage = async () => {\r\n        setIsChangesLoading(true);\r\n        const formData = new FormData();\r\n        if (!newProfileImage) {\r\n            alert('Error: please, choose an image');\r\n            setIsChangesLoading(false);\r\n            return;\r\n        }\r\n        formData.append('file', newProfileImage);\r\n        formData.append('upload_preset', 'kalina-why-not');\r\n        formData.append('cloud_name', 'kalina-why-not');\r\n        await fetch('https://api.cloudinary.com/v1_1/kalina-why-not/image/upload', {\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n        .then(res => res.json())\r\n        .then(async formData => {\r\n            const data = await request('/api/users/put/profileImg', 'PUT', {picture: formData.url}, {\r\n                Authorization: `Bearer ${props.token}`,\r\n            });\r\n            sessionStorage.setItem('storageName', JSON.stringify({\r\n                token: props.token, user: data\r\n            }));\r\n            const newData = JSON.parse(sessionStorage.getItem('storageName'));\r\n            if (newData && newData.token) {\r\n                props.login(newData.token, newData.user);\r\n            }\r\n            setIsChangesLoading(false);\r\n            setIsChangingProfileImage(false);\r\n        })\r\n        .catch(err => console.log(err));\r\n    };\r\n\r\n    const deletePost = async (postId) => {\r\n        setIsChangesLoading(true);\r\n        await request(`/api/posts/delete/post/${postId}`, 'DELETE', null, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        });\r\n        const data = await request('/api/posts/get/myposts', 'GET', null, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        });\r\n\r\n        imgParams(data.posts).then(data => setMyPosts(data));\r\n\r\n        setIsChangesLoading(false);\r\n        setIsPostDetailOpen(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {\r\n            !myPosts ? \r\n            <Spinner />\r\n            :\r\n            <div className='profile-page'>\r\n                <div className='profile__info'>\r\n                    <div className='avatar'>\r\n                        <img style={profileImgParams} src={props.user.profileImg} alt=''/>\r\n                    </div> \r\n                    <div className='info'>\r\n                        <div className='name-settings'>\r\n                            <h1>{props.user.displayName}</h1>\r\n                            <div>\r\n                                <i onClick={() => setIsChangingProfileImage(true)} className={\"material-icons\"}>settings</i>\r\n                                <i onClick={() => setIsCreatePostOpen(true)} className={\"material-icons\"}>add_to_photos</i>\r\n                            </div>\r\n                        </div> \r\n                        <div className='attributes'>\r\n                            <h3><strong>{myPosts.length}</strong> posts</h3>\r\n                            <h3><strong>{followData.followers.length}</strong> followers</h3>\r\n                            <h3><strong>{followData.following.length}</strong> following</h3>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='mobile-attributes'>\r\n                    <h3><strong>{myPosts.length}</strong> posts</h3>\r\n                    <h3><strong>{followData.followers.length}</strong> followers</h3>\r\n                    <h3><strong>{followData.following.length}</strong> following</h3>\r\n                </div>\r\n                <div className='profile__gallery'>\r\n                {myPosts.map(post => <div onClick={() => {setSelectedPost(post); setIsPostDetailOpen(true)}} key={post._id}><div><img src={post.picture} alt=\"\"  style={post.params}/></div></div>)}\r\n                </div>\r\n                \r\n                {isChangingProfileImage && <>\r\n                    <div onClick={() => setIsChangingProfileImage(false)} className='modal-window__close'></div>\r\n                    <div className='modal-window'>\r\n                        {isChangesLoading && <Spinner />}\r\n                        <i onClick={() => setIsChangingProfileImage(false)} className={\"material-icons close-btn\"}>clear</i>\r\n                        <div className='inner'>\r\n                            <h1>Account settings</h1>\r\n                            <div>\r\n                                <span>New profile image</span>\r\n                                <input type='file' accept=\"image/jpeg,image/png,image/bmp\" onChange={e => setNewProfileImage(e.target.files[0])} required/>\r\n                            </div>\r\n                            <button onClick={changeProfileImage}>Submit</button>\r\n                        </div>\r\n                    </div>\r\n                </>}\r\n                {isCreatePostOpen && <>\r\n                    <div onClick={() => setIsCreatePostOpen(false)} className='modal-window__close'></div>\r\n                    <div className='modal-window'>\r\n                        {isChangesLoading && <Spinner />}\r\n                        <i onClick={() => setIsCreatePostOpen(false)} className={\"material-icons close-btn\"}>clear</i>\r\n                        <div className='inner'>\r\n                            <h1>New Post</h1>\r\n                            <div>\r\n                                <span>Post image</span>\r\n                                <input type='file' accept=\"image/jpeg,image/png,image/bmp\" onChange={e => setNewPostImage(e.target.files[0])} required/>\r\n                                <span>Your comment</span>\r\n                                <input type='text' placeholder='Enter...' value={body} onChange={e => setBody(e.target.value)} required/>\r\n                            </div>\r\n                            <button onClick={setPostData}>Submit</button>\r\n                        </div>\r\n                    </div>\r\n                </>}\r\n                {(selectedPost && isPostDetailOpen) && \r\n                <>\r\n                    <div onClick={() => setIsPostDetailOpen(false)} className='modal-window__close'></div>\r\n                    <div className='modal-window'>\r\n                        {isChangesLoading && <Spinner />}\r\n                        <i onClick={() => deletePost(selectedPost._id)} className={\"material-icons delete-btn\"}>delete</i>\r\n                        <i onClick={() => setIsPostDetailOpen(false)} className={\"material-icons close-btn\"}>clear</i>\r\n                        <PostItem post={selectedPost} />\r\n                    </div>\r\n                </>}\r\n            </div>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        token: state.auth.token,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        login: (token, user) => {\r\n            dispatch(loginAC(token, user));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\HomePage\\PostItem.js",["133","134"],"import { connect } from 'react-redux';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { useState } from 'react';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport { Link } from 'react-router-dom';\r\nimport { Avatar } from '@material-ui/core';\r\nimport Picker from 'emoji-picker-react';\r\nimport toLocalDate from '../../hooks/toLocalDate.hook';\r\n\r\nconst PostItem = ({post, token, user}) => {\r\n    const {request} = useHttp();\r\n    const [isLiked, setIsLiked] = useState(post.likes.includes(user._id));\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [likesCount, setLikesCount] = useState(post.likes.length);\r\n    const [comments, setComments] = useState(post.comments);\r\n    const [commentsCount, setCommentsCount] = useState(post.comments.length);\r\n    const [showAllComments, setShowAllComments] = useState(false);\r\n    const [newComment, setNewComment] = useState('');\r\n    const commentsField = useRef(null);\r\n    const [chosenEmoji, setChosenEmoji] = useState(null);\r\n    const [isOpenedEmoji, setIsOpenedEmoji] = useState(false);\r\n    const timestamp = toLocalDate(post.createdAt);\r\n\r\n    const onEmojiClick = (event, emojiObject) => setChosenEmoji(emojiObject);\r\n    \r\n    useEffect(() => {\r\n        document.onmouseup = (e) => {\r\n            const emojiDiv = document.querySelector('.emojiDiv');\r\n            if (!e.path.includes(emojiDiv)) {\r\n                setIsOpenedEmoji(false);\r\n            }\r\n        }\r\n\r\n        return () => document.onmouseup = null;\r\n    }, [isOpenedEmoji]);\r\n\r\n    useEffect(async () => {\r\n        if (isLoaded) {\r\n            const data = await request(`/api/posts/put/${isLiked ? 'like' : 'unlike'}`, 'PUT', {postId: post._id}, {Authorization: `Bearer ${token}`});\r\n            setLikesCount(data.likes.length);\r\n        }\r\n    }, [isLiked]);\r\n\r\n    const likeHandler = () => {\r\n        setIsLoaded(true);\r\n        setIsLiked(!isLiked);\r\n    }\r\n    \r\n    const newCommentHandler = async () => {\r\n        const data = await request(`/api/posts/put/comment`, 'PUT', {postId: post._id, text: newComment}, {Authorization: `Bearer ${token}`});\r\n        setComments(data.comments);\r\n        setNewComment('');\r\n        setCommentsCount(data.comments.length);\r\n        setIsOpenedEmoji(false);\r\n    }\r\n    \r\n    useEffect(() => {\r\n        commentsField.current.classList.toggle('show-comments');\r\n    }, [showAllComments]);\r\n\r\n    useEffect(() => {\r\n        if (chosenEmoji) setNewComment(prev => prev + chosenEmoji.emoji);\r\n    }, [chosenEmoji]);\r\n\r\n    return (\r\n        <div className='element'>\r\n            <div className='card'>\r\n                <div className='card-header'>\r\n                    <Link to={user._id !== post.owner._id ? '/profile/' + post.owner._id : '/profile'}><Avatar src={post.owner.profileImg}/><p>{post.owner.displayName}</p></Link>\r\n                </div>\r\n                <div className='card-image'>\r\n                    <img src={post.picture} alt=\"\"/>\r\n                </div>\r\n                <div className='card-content'>\r\n                    <i onClick={likeHandler} className={\"material-icons\"} style={{fontSize: '35px', cursor: 'pointer', color: 'red'}} >{isLiked ? 'favorite' : 'favorite_border'}</i>\r\n                    <small><strong>Likes: {likesCount}</strong></small>\r\n                    <p><strong>{post.owner.displayName}</strong> {post.body}</p>\r\n                    <div><strong className='show-comments-btn' onClick={() => setShowAllComments(!showAllComments)}>{!showAllComments ? 'Show' : 'Hide'} all comments ({commentsCount})</strong></div>\r\n                    <div className={'comments show-comments'} ref={commentsField}>\r\n                        {comments.map(item => <div key={item._id}><strong>{item.owner.displayName}</strong> {item.text}</div>)}\r\n                    </div>\r\n                    <div className='timestamp'>{timestamp.date + ' ' + timestamp.time}</div>\r\n                </div>\r\n                <div className='new-comment'>\r\n                    {isOpenedEmoji && \r\n                        <div className='emojiDiv' style={{position: 'absolute', bottom: '20px', left: '50%', transform: 'translate(-50%, -32px)', zIndex: '1000'}}>\r\n                            <Picker disableAutoFocus={true} onEmojiClick={onEmojiClick} />\r\n                        </div>\r\n                    }\r\n                    <i onClick={() => setIsOpenedEmoji(!isOpenedEmoji)} className={\"material-icons emojicon\"} style={{fontSize: '35px', cursor: 'pointer', width: '35px'}} >insert_emoticon</i>\r\n                    <input value={newComment} onChange={e => {setNewComment(e.target.value); setIsOpenedEmoji(false);}} onKeyUp={e => (e.keyCode === 13 && newComment) ? newCommentHandler() : false} type='text' placeholder='Add a comment...'/>\r\n                    <button onClick={newCommentHandler} disabled={!newComment}>Publish</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    token: state.auth.token,\r\n    user: state.auth.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(PostItem);","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\components\\Spinner\\Spinner.js",[],"D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\ProfilePage\\UserProfile.js",["135","136"],"import { connect } from 'react-redux';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport PostItem from '../HomePage/PostItem';\r\nimport imgParams from '../../hooks/imgParams.hook';\r\nimport { setChatAC, setDialogsAC, setIsDialogSelectedAC, setMessagesAC } from '../../redux/dialogs-reducer';\r\nimport SpinnerSmall from '../../components/Spinner/SpinnerSmall';\r\nimport './Profile.scss';\r\n\r\nconst Profile = (props) => {\r\n    const history = useHistory();\r\n    const {request} = useHttp(); \r\n    const [userProfile, setUserProfile] = useState(null);\r\n    const [isFollowing, setIsFollowing] = useState(null);\r\n    const [profileImgParams, setProfileImgParams] = useState(null);\r\n    const {userId} = useParams();\r\n    const [isPostDetailOpen, setIsPostDetailOpen] = useState(false);\r\n    const [selectedPost, setSelectedPost] = useState(null);\r\n    const [newMessage, setNewMessage] = useState('');\r\n    const [isOpenedNewMessageField, setIsOpenedNewMessageField] = useState(false);\r\n    const [isSendingNewMessage, setIsSendingNewMessage] = useState(false);\r\n\r\n    useEffect(async () => {\r\n        const data = await request(`/api/users/get/user/${userId}`, 'GET', null, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        });\r\n        \r\n        imgParams(data.posts).then(posts => {\r\n            setUserProfile({posts, user: data.user});\r\n            setIsFollowing(data.user.followers.includes(props.user._id));\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        document.onmouseup = (e) => {\r\n            const input = document.querySelector('.new-message');\r\n            \r\n            if (!e.path.includes(input)) {\r\n                setIsOpenedNewMessageField(false);\r\n            }\r\n        }\r\n        \r\n        return () => document.onmouseup = null;\r\n    }, [isOpenedNewMessageField]);\r\n\r\n    useEffect(() => {\r\n        if (userProfile) {\r\n            imgParams(userProfile.user.profileImg).then(params => {\r\n                setProfileImgParams(params);\r\n            });\r\n        }\r\n    }, [userProfile])\r\n\r\n    const followUser = async () => {\r\n        await request(`/api/users/put/follow`, 'PUT', {followId: userId}, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        }); \r\n        \r\n        setUserProfile(prev => {\r\n            prev.user.followers.push('');\r\n            return prev;\r\n        });\r\n\r\n        setIsFollowing(true);\r\n    }\r\n\r\n    const unfollowUser = async () => {\r\n        await request(`/api/users/put/unfollow`, 'PUT', {unfollowId: userId}, {\r\n            Authorization: `Bearer ${props.token}`,\r\n        }); \r\n        \r\n        setUserProfile(prev => {\r\n            prev.user.followers.pop();\r\n            return prev;\r\n        });\r\n\r\n        setIsFollowing(false);\r\n    }\r\n\r\n    const sendMessage = async () => {\r\n        try {\r\n            if (newMessage) {\r\n                setIsSendingNewMessage(true);\r\n                setNewMessage('');\r\n                let foundChat = null;\r\n                let extra = null; \r\n                const chatName = null;\r\n\r\n                const allChats = await request('/api/chats/get/conversations', 'GET', null, {\r\n                    Authorization: `Bearer ${props.token}`,\r\n                });\r\n                \r\n                allChats.forEach(chat => {\r\n                    chat.extra.forEach(item => {\r\n                        if (item.id === userId) {\r\n                            foundChat = chat.id;\r\n                        } \r\n                    })\r\n                });\r\n\r\n                if (foundChat) {\r\n                    await request(`/api/chats/new/message?id=${foundChat}`, 'POST', {\r\n                        message: newMessage,\r\n                        timestamp: Date.now()\r\n                    }, {Authorization: `Bearer ${props.token}`});\r\n                } else {\r\n                    const data = await request('/api/chats/new/conversation', 'POST', {chatName, other: userId}, {Authorization: `Bearer ${props.token}`});\r\n\r\n                    foundChat = data._id\r\n\r\n                    await request(`/api/chats/new/message?id=${foundChat}`, 'POST', {\r\n                        message: newMessage,\r\n                        timestamp: Date.now()\r\n                    }, {Authorization: `Bearer ${props.token}`});\r\n                }\r\n\r\n                const chat = await request(`/api/chats/get/conversation?id=${foundChat}`, 'GET', null, {Authorization: `Bearer ${props.token}`});\r\n\r\n                props.setMessages(chat.conversation);\r\n\r\n                chat.extra.forEach(el => {\r\n                    if (el.id !== props.user._id) {\r\n                        extra = {...el};\r\n                    }\r\n                });\r\n\r\n                props.setChat({\r\n                    chatName: extra.displayName || chat.chatName,\r\n                    chatImg: extra.profileImg || chat.chatImg,\r\n                    participantId: extra.id,\r\n                    chatId: props.id\r\n                });\r\n\r\n                props.setIsDialogSelected(true);\r\n                setIsSendingNewMessage(false);\r\n\r\n                history.push('/dialogs');\r\n            }\r\n        } catch(err) {console.log(err)}\r\n    }\r\n    \r\n    return(\r\n        <>\r\n        {\r\n            !userProfile ?\r\n            <Spinner />\r\n            :\r\n            <div className='profile-page'>\r\n                <div className='profile__info'>\r\n                    <div className='avatar'>\r\n                        <img style={profileImgParams} src={userProfile.user.profileImg} alt=''/>\r\n                    </div> \r\n                    <div className='info'>\r\n                        <div className='name-settings'>\r\n                            <h1>{userProfile.user.displayName}</h1>\r\n                            <div className='btn-wrapper'>\r\n                                {\r\n                                    isFollowing ? \r\n                                    <button onClick={unfollowUser}>Unfollow</button>\r\n                                    :\r\n                                    <button onClick={followUser}>Follow</button>\r\n                                }\r\n                                <button onClick={() => setIsOpenedNewMessageField(!isOpenedNewMessageField)}>Send message</button>\r\n                                {isOpenedNewMessageField &&\r\n                                    <div className='new-message'>\r\n                                        <input \r\n                                            value={newMessage} \r\n                                            onChange={e => setNewMessage(e.target.value)} \r\n                                            onKeyUp={e => (e.keyCode === 13 && newMessage) ? sendMessage() : false} \r\n                                            type='text' \r\n                                            placeholder='Enter your message'/>\r\n                                        <button \r\n                                            onClick={sendMessage} \r\n                                            disabled={!newMessage}>\r\n                                                {isSendingNewMessage && <SpinnerSmall />}\r\n                                                <i className={\"material-icons\"} style={{fontSize: '35px', cursor: 'pointer', width: '35px'}}>send</i>\r\n                                        </button>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='attributes'>\r\n                            <h3><strong>{userProfile.posts.length}</strong> posts</h3>\r\n                            <h3><strong>{userProfile.user.followers.length}</strong> followers</h3>\r\n                            <h3><strong>{userProfile.user.following.length}</strong> following</h3>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='mobile-attributes'>\r\n                    <h3><strong>{userProfile.posts.length}</strong> posts</h3>\r\n                    <h3><strong>{userProfile.user.followers.length}</strong> followers</h3>\r\n                    <h3><strong>{userProfile.user.following.length}</strong> following</h3>\r\n                </div>\r\n                <div className='profile__gallery'>\r\n                {/* <i onClick={deletePost} className={\"material-icons\"} style={{fontSize: '30px', cursor: 'pointer', float: 'right'}}>delete</i> */}\r\n                {userProfile.posts.map(post => <div onClick={() => {setSelectedPost(post); setIsPostDetailOpen(true)}} key={post._id}><div><img src={post.picture} alt=\"\"  style={post.params}/></div></div>)}\r\n                </div>\r\n                {(selectedPost && isPostDetailOpen) && <>\r\n                    <div onClick={() => setIsPostDetailOpen(false)} className='modal-window__close'></div>\r\n                    <div className='modal-window'>\r\n                        <i onClick={() => setIsPostDetailOpen(false)} className={\"material-icons close-btn\"}>clear</i>\r\n                        <PostItem post={selectedPost} />\r\n                    </div>\r\n                </>}\r\n            </div>\r\n        }\r\n        </>        \r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        token: state.auth.token,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setDialogs: (dialogs) => {\r\n            dispatch(setDialogsAC(dialogs));\r\n        },\r\n        setMessages: (messages) => {\r\n            dispatch(setMessagesAC(messages));\r\n        },\r\n        setChat: chat => {\r\n            dispatch(setChatAC(chat))\r\n        },\r\n        setIsDialogSelected: (a) => {\r\n            dispatch(setIsDialogSelectedAC(a))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\pages\\UsersPage\\Users.js",["137","138","139","140"],"import { Avatar } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport './Users.scss';\r\n\r\nconst Users = (props) => {\r\n    const {request} = useHttp();\r\n    const [searchUsers, setSearchUsers] = useState('');\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [foundUsers, setFoundUsers] = useState([]);\r\n    const [allUsers, setAllUsers] = useState([]);\r\n\r\n    useEffect(async () => {\r\n        try{\r\n            setIsLoading(true);\r\n            const users = await request('/api/users/get/users', 'GET', null, {Authorization: `Bearer ${props.token}`});\r\n            setAllUsers(users);\r\n            setIsLoading(false);\r\n        } catch (err) {console.log(err)}\r\n    }, []);\r\n\r\n    useEffect(async () => {\r\n        if (searchUsers) {\r\n            try{\r\n                setIsLoading(true);\r\n                const users = await request('/api/users/post/users-search', 'POST', {query: searchUsers}, {Authorization: `Bearer ${props.token}`});\r\n                setFoundUsers(users);\r\n                setIsLoading(false);\r\n            } catch (err) {console.log(err)}\r\n        } else {\r\n            setFoundUsers([]);\r\n        }\r\n    }, [searchUsers]);\r\n\r\n    return (\r\n        <div className='users-page'>\r\n            <div className=\"search-user\">\r\n                <i className=\"material-icons\" style={{position: 'absolute', top: '50%', transform: 'translateY(-50%)'}}>search</i>\r\n                <input type=\"text\" placeholder=\"Search...\" className=\"search-input\" value={searchUsers} onChange={(e) => setSearchUsers(e.target.value)}/>\r\n                </div>\r\n                {\r\n                    foundUsers.length !== 0 ?\r\n                    <div className=\"dropdown-content\">\r\n                        {foundUsers.map(user => {\r\n                            return (\r\n                                <Link to={props.user._id !== user._id ? '/profile/' + user._id : '/profile'} \r\n                                    key={user._id} \r\n                                    onClick={() => setSearchUsers('')}>\r\n                                        <div>\r\n                                            <Avatar src={user.profileImg}/>\r\n                                            <p>{user.displayName}</p>\r\n                                        </div>\r\n                                </Link>\r\n                            )\r\n                        })}\r\n                    </div> \r\n                    :\r\n                    <div className=\"dropdown-content\">\r\n                        {allUsers.map(user => {\r\n                            return (\r\n                                <Link to={props.user._id !== user._id ? '/profile/' + user._id : '/profile'} \r\n                                    key={user._id} \r\n                                    onClick={() => setSearchUsers('')}>\r\n                                        <div>\r\n                                            <Avatar src={user.profileImg}/>\r\n                                            <p>{user.displayName}</p>\r\n                                        </div>\r\n                                </Link>\r\n                            )\r\n                        })}\r\n                    </div> \r\n                }\r\n                {isLoading && <Spinner />}\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        token: state.auth.token,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Users);","D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\hooks\\imgParams.hook.js",[],"D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\hooks\\toLocalDate.hook.js",[],"D:\\xampp73\\xampp\\htdocs\\react\\Social-Network\\client\\src\\components\\Spinner\\SpinnerSmall.js",[],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":27,"column":8,"nodeType":"147","endLine":27,"endColumn":25,"suggestions":"148"},{"ruleId":"145","severity":1,"message":"149","line":30,"column":15,"nodeType":"150","endLine":39,"endColumn":6},{"ruleId":"145","severity":1,"message":"151","line":39,"column":8,"nodeType":"147","endLine":39,"endColumn":21,"suggestions":"152"},{"ruleId":"153","severity":1,"message":"154","line":77,"column":69,"nodeType":"155","endLine":77,"endColumn":100},{"ruleId":"153","severity":1,"message":"154","line":79,"column":67,"nodeType":"155","endLine":79,"endColumn":98},{"ruleId":"153","severity":1,"message":"154","line":127,"column":85,"nodeType":"155","endLine":127,"endColumn":88},{"ruleId":"153","severity":1,"message":"154","line":127,"column":109,"nodeType":"155","endLine":127,"endColumn":112},{"ruleId":"156","severity":1,"message":"157","line":3,"column":8,"nodeType":"158","messageId":"159","endLine":3,"endColumn":14},{"ruleId":"145","severity":1,"message":"149","line":14,"column":15,"nodeType":"150","endLine":20,"endColumn":6},{"ruleId":"145","severity":1,"message":"151","line":20,"column":8,"nodeType":"147","endLine":20,"endColumn":10,"suggestions":"160"},{"ruleId":"145","severity":1,"message":"161","line":29,"column":8,"nodeType":"147","endLine":29,"endColumn":10,"suggestions":"162"},{"ruleId":"145","severity":1,"message":"163","line":53,"column":8,"nodeType":"147","endLine":53,"endColumn":19,"suggestions":"164"},{"ruleId":"145","severity":1,"message":"161","line":39,"column":8,"nodeType":"147","endLine":39,"endColumn":23,"suggestions":"165"},{"ruleId":"145","severity":1,"message":"166","line":54,"column":8,"nodeType":"147","endLine":54,"endColumn":10,"suggestions":"167"},{"ruleId":"145","severity":1,"message":"168","line":85,"column":8,"nodeType":"147","endLine":85,"endColumn":27,"suggestions":"169"},{"ruleId":"145","severity":1,"message":"149","line":25,"column":15,"nodeType":"150","endLine":43,"endColumn":6},{"ruleId":"145","severity":1,"message":"170","line":43,"column":8,"nodeType":"147","endLine":43,"endColumn":10,"suggestions":"171"},{"ruleId":"145","severity":1,"message":"149","line":37,"column":15,"nodeType":"150","endLine":42,"endColumn":6},{"ruleId":"145","severity":1,"message":"172","line":42,"column":8,"nodeType":"147","endLine":42,"endColumn":17,"suggestions":"173"},{"ruleId":"145","severity":1,"message":"149","line":25,"column":15,"nodeType":"150","endLine":34,"endColumn":6},{"ruleId":"145","severity":1,"message":"174","line":34,"column":8,"nodeType":"147","endLine":34,"endColumn":10,"suggestions":"175"},{"ruleId":"145","severity":1,"message":"149","line":16,"column":15,"nodeType":"150","endLine":23,"endColumn":6},{"ruleId":"145","severity":1,"message":"151","line":23,"column":8,"nodeType":"147","endLine":23,"endColumn":10,"suggestions":"176"},{"ruleId":"145","severity":1,"message":"149","line":25,"column":15,"nodeType":"150","endLine":36,"endColumn":6},{"ruleId":"145","severity":1,"message":"151","line":36,"column":8,"nodeType":"147","endLine":36,"endColumn":21,"suggestions":"177"},"no-native-reassign",["178"],"no-negated-in-lhs",["179"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fixOffset'. Either include it or remove the dependency array.","ArrayExpression",["180"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'props.token' and 'request'. Either include them or remove the dependency array.",["181"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'Slider' is defined but never used.","Identifier","unusedVar",["182"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["183"],"React Hook useEffect has a missing dependency: 'getLastMessage'. Either include it or remove the dependency array.",["184"],["185"],"React Hook useEffect has missing dependencies: 'getDialogs' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["186"],"React Hook useEffect has missing dependencies: 'props' and 'request'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["187"],"React Hook useEffect has missing dependencies: 'props.token', 'props.user.profileImg', and 'request'. Either include them or remove the dependency array.",["188"],"React Hook useEffect has missing dependencies: 'isLoaded', 'post._id', 'request', and 'token'. Either include them or remove the dependency array.",["189"],"React Hook useEffect has missing dependencies: 'props.token', 'props.user._id', 'request', and 'userId'. Either include them or remove the dependency array. If 'setIsFollowing' needs the current value of 'props.user._id', you can also switch to useReducer instead of useState and read 'props.user._id' in the reducer.",["190"],["191"],["192"],"no-global-assign","no-unsafe-negation",{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"197","fix":"215"},{"desc":"195","fix":"216"},"Update the dependencies array to be: [fixOffset, isAuthenticated]",{"range":"217","text":"218"},"Update the dependencies array to be: [props.token, request, searchUsers]",{"range":"219","text":"220"},"Update the dependencies array to be: [props.token, request]",{"range":"221","text":"222"},"Update the dependencies array to be: [props]",{"range":"223","text":"224"},"Update the dependencies array to be: [dialog.id, getLastMessage]",{"range":"225","text":"226"},"Update the dependencies array to be: [props, props.dialogs]",{"range":"227","text":"228"},"Update the dependencies array to be: [getDialogs, props]",{"range":"229","text":"230"},"Update the dependencies array to be: [props, props.chat.chatId, request]",{"range":"231","text":"232"},"Update the dependencies array to be: [props.token, props.user.profileImg, request]",{"range":"233","text":"234"},"Update the dependencies array to be: [isLiked, isLoaded, post._id, request, token]",{"range":"235","text":"236"},"Update the dependencies array to be: [props.token, props.user._id, request, userId]",{"range":"237","text":"238"},{"range":"239","text":"222"},{"range":"240","text":"220"},[851,868],"[fixOffset, isAuthenticated]",[1300,1313],"[props.token, request, searchUsers]",[725,727],"[props.token, request]",[1036,1038],"[props]",[1751,1762],"[dialog.id, getLastMessage]",[1412,1427],"[props, props.dialogs]",[1788,1790],"[getDialogs, props]",[3072,3091],"[props, props.chat.chatId, request]",[1779,1781],"[props.token, props.user.profileImg, request]",[1805,1814],"[isLiked, isLoaded, post._id, request, token]",[1619,1621],"[props.token, props.user._id, request, userId]",[908,910],[1369,1382]]